<?php

echo drupal_get_path('module', 'modulename');

  drupal_add_js(path().'/js/rowlink.js',null,'footer',true,TRUE);

function path()
{return	drupal_get_path("module", "perfanal");}

function path_rel()
{return	base_path().drupal_get_path("module", "perfanal");
}

function current_page()
{
	$url = $_SERVER['REQUEST_URI'];
	$ex_url = explode('/',$url);
   return str_replace('?q=','',$ex_url[(($ex_url[1]=='perfanal')?2:1)]).'/';
   
}




function setseasons_breadcrumb($bread)
{
	
   $url = current_page();
   $seasons = seasons();
   $options='';
   foreach($seasons as $season)
     $options.= '<option '.((arg(1)==$season)?'selected':'').' value="'.$season.'">'.$season.'-'.($season+1).'</option>';
   $Sea = '<select onchange="document.location=\''.url($url).'\'+this.value;" size="1" name="Season">'.$options.'</select>&nbsp;';
   $seas[] = $Sea;
   if($bread==null)
     drupal_set_breadcrumb($seas);
   else
     drupal_set_breadcrumb($bread,$error);
}

function seasons($reset = false)
{
	static $my_data;
  if (!isset($my_data) || $reset) {
   
		   $tm4db = variable_get('perfanal_database', 'perfanal');
		   $result = db_query("show tables from ".$tm4db." like 'meet\_____'");
		
		   while ($row_data = mysql_fetch_array($result))
		     {
			$year = substr($row_data[0], strlen($row_data[0])-4, 4);
			if ($year != "")
			  {
			     $seasons[$year] = $year;
			  }
		     }
		
		   $seasons = array_reverse($seasons, true);
		   $my_data= $seasons;
    
  }
  return $my_data;
  
}

function get_cur_seasons()
{
   $tm4db = variable_get('perfanal_database', 'perfanal');
   $default=null;
   $rev_seasons = seasons();
   foreach ($rev_seasons as $key => $value)
     {
	if($default==null)
	  $default = $key;
	break;
     }
   return $default;
}

function get_seasons($noredirect = false)
{
   $tm4db = variable_get('perfanal_database', '');
   $def = variable_get('perfanal_season', '');
   $selected =arg(1);
   $url = referer_uri();
   if($selected==null & $url!=null)
     {//get refer url
	     $ex_url = explode('/',$url);
	     $selected = $ex_url[(($ex_url[3]=='perfanal')?5:4)];
	     
	if($selected !=null)
	  drupal_goto(current_page().$selected);
     }
   $season =null;
   $default=null;
   $rev_seasons = seasons();
   foreach ($rev_seasons as $key => $value)
     {
	if($default==null)
	  $default = $key;
	if($key == $selected)
	  $season = $key;
     }

   $default = (($def!='')?$def:$default);
   if($season ==null)
     if($noredirect==false)
       {
	  drupal_goto(current_page().$default);
       }
   else
     $season = $default;
   return $season;
}

function ranking_date2()
{
	ranking_date(arg(1));
}

function ranking_date($season)
{
   $Sd = variable_get('perfanal_ranking_dd', '01');
   $Sm = variable_get('perfanal_ranking_mm', '01');

   $cur = getdate();
   if(($cur['mday'] < $Sd & $cur['mon'] <= $Sm ) || $cur['mon'] < $Sm)
     {//beging year
	if($season < ($cur['year']-1))
	  {
	     //archive date
	     $rank['date'] = (arg(1) +1).'-'.$Sm.'-'.$Sd;
	     $rank['type'] = 'archive';
	  }
	else
	  {
	     //current date.
	     $rank['type'] = 'current';
	     $update = variable_get('perfanal_ranking_update', 'W');
	     $period = variable_get('perfanal_ranking_period', '2');
	     if($update=='W')
	       {
		  $result = db_query("SELECT SQL_CACHE SUBDATE(CURDATE(),((WEEK(CURDATE(),1)%".$period.")*7)+ DAYOFWEEK(CURDATE())-1+IF(DAYOFWEEK(CURDATE())=1,7,0)) as dt ");
		  $object = db_fetch_object($result);
		  $rank['date'] = $object->dt;
	       }
	     else
	       {
		  $result = db_query("SELECT SQL_CACHE LAST_DAY(SUBDATE(CURDATE(),INTERVAL 1 MONTH)) as dt");
		  $object = db_fetch_object($result);
		  $rank['date'] = $object->dt;
	       }
	  }
     }
   else
     {//end year
	if($season < ($cur['year']))
	  {
	     //archive date
	     $rank['date'] = ($season+1).'-'.$Sm.'-'.$Sd;
	     $rank['type'] = 'archive';
	  }
	else
	  {
	     //current date.
	     $rank['type'] = 'current';
	     $update = variable_get('perfanal_ranking_update', 'W');
	     $period = variable_get('perfanal_ranking_period', '2');
	     if($update=='W')
	       {
		  $result = db_query("SELECT SQL_CACHE SUBDATE(CURDATE(),((WEEK(CURDATE(),1)%".$period.")*7)+ DAYOFWEEK(CURDATE())-1+IF(DAYOFWEEK(CURDATE())=1,7,0)) as dt ");
		  $object = db_fetch_object($result);
		  $rank['date'] = $object->dt;
	       }
	     else
	       {
		  $result = db_query("SELECT SQL_CACHE LAST_DAY(SUBDATE(CURDATE(),INTERVAL 1 MONTH)) as dt");
		  $object = db_fetch_object($result);
		  $rank['date'] = $object->dt;
	       }
	  }
     }
   return $rank;
}

function js_null($v)
{
   return(($v==null)?'0':$v);
}

/*functions not yet protected by sql injection
meet
meet/indi_points
fina/*
rankings/*

*/
      //Main varible definitions and functions

  $tm4db = variable_get('perfanal_database', 'perfanal');

drupal_add_css(path().'/perfanal.css','module');

function lsc_filter()
{
   $lsc = variable_get('perfanal_lsc', '');
   return($lsc =='')?'':"And lsc='".$lsc."'";
}

//Term expansions functions

//Just as a reference
function yesno($v)
{
   return ($v==0)?'No':'Yes';
}

function hasvalue($a,$v)
{
   return (($v>0)?$a.$v:'--');
}
function Code_Type($v)
{
   $Code[0] = 'Groups';
   $Code[1] = 'Sub Groups';
   $Code[2] = 'School Year';
   $Code[3] = 'Meet Type';
   $Code[4] = 'Meet Division';
   $Code[5] = 'WM Groups';
   $Code[6] = 'WM Sub Groups';

   return $Code[$v];
}

function Course($w,$v)
{
   $Course[0]['L'] = 'LCM';
   $Course[0]['S'] = 'SCM';
   $Course[1]['L'] = 'LCM-50m';
   $Course[1]['S'] = 'SCM-25m';
   $Course[1]['ALL'] = ' - All Courses';
   return $Course[$w][strtoupper($v)];
}

function Gender($v)
{
   $Gender['X'] = 'Mixed';
   $Gender['F'] = 'Female';
   $Gender['M'] = 'Male';
   $Gender['FEMALE'] = 'Female';
   $Gender['MALE'] = 'Male';
   $Gender['MIXED'] = 'Mixed';
   return $Gender[strtoupper($v)];
}

function IR($v)
{
   $IR['I'] = 'Indi';
   $IR['R'] = 'Relay';
   $IR['L'] = 'Lead';
   return $IR[strtoupper($v)];
}

function FP($v)
{
   $FP['F'] = 'Final';
   $FP['P'] = 'Prelim';
   $FP['I'] = 'Semi';
   return $FP[strtoupper($v)];
}

function Stroke($v)
{
   $Stroke = array('','Freestyle','Back','Breast','Butterfly','Medley');
   return $Stroke[$v];
}

//Formating functions

function NT($n)
{$NT = array('','','NS','DNF','','DQ');
   return	$NT[$n];
}

function Score($n,$s)
{
   $s = (NT($n) =='')?get_time($s):''.NT($n).get_time($s).'';
   return $s;
};

function get_time ($Score)
{
   if($Score==0)
     return ' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--';
   else
     {$split = substr($Score, strlen($Score)-2, 2);
	$seconds = substr($Score, 0, strlen($Score)-2);
	return Date('i:s', $seconds).'.'.$split;
     }
}

function Age($Ag)
{
   return ($Ag=='*')?'*':(($Ag>99)?LO_HI(floor($Ag/100),$Ag%100):LO_HI(0,$Ag));//(($Ag==99)?'Open':$Ag.'yrs'));
}

function LO_HI($Lo,$Hi)
{
   return ($Lo>=$Hi)?$Hi.'yrs':(($Lo>0&$Hi<99)?$Lo.'-'.$Hi:(($Lo==0&$Hi==99)?'Open':(($Hi==99)?$Lo.' & Over':$Hi.' & Under')));
}

//Not to self change date formatting to corisponed with drupal date formate.
function get_date($v)
{

   $start_date = explode("-", $v);
   return ($v==null)?'-':(($v=='0000-00-00 00:00:00')?'--': Date('d/m/Y', mktime(0, 0, 0, $start_date[1], $start_date[2], $start_date[0])));
}
/*
function ath_url(page)
{
//select a.athlete from wpmergfixed.athlete_2006 as a inner join wpmergfixed.team_2006 as t on (a.team1=t.team), perfanal_subsites as s Where t.lsc = s.lsc
}*/

function t2d($base_time)
{
   $pos = strpos($base_time, ':');
   if ($pos)
     {
	$min = substr($base_time, 0, $pos);
	$min_pos = $pos;

	$base_time = substr($base_time, $pos+1,
			    strlen($base_time)-$pos);
     }
   else
     {
	$min = 0;
     }

   $result = (($min*60)+$base_time);

   return $result;
}

function d2t($base_split)
{
   if (!strpos($base_split, '.'))
     $base_split = $base_split.'.00';
   $split = substr($base_split, strlen($base_split)-2, 2);
   $seconds = substr($base_split, 0, strlen($base_split)-2);
   return Date('i:s',
	       $seconds).'.'.$split;
}

function course_conversion($tm4db,$season) // Short Course And lOng Course only
{
	Static $con;
	if(!isset($con))
	{
	$res = db_query('SELECT SQL_CACHE floor(FreeTurn*100) as FreeTurn , floor(BackTurn*100) as BackTurn, floor(BreastTurn*100) as BreastTurn, floor(FlyTurn*100) as FlyTurn, floor(IMTurn*100) as IMTurn,Straight from  '.$tm4db.'.options_'.$season);
	if($object = db_fetch_object($res))
	$con =  ' floor( r.Score + IF(r.Course=\'L\',(r.Distance/50)-(r.Distance/25),(r.Distance/25)-(r.Distance/50))*ELT(r.STROKE,'.$object->FreeTurn.','.$object->BackTurn.','.$object->BreastTurn.','.$object->FlyTurn.','.$object->IMTurn.')) ';
	else  $con = ' \'0\' ';
	}
	
	return $con;
	
}

//Original Coding

function pages_limit($page)
{
   $size = variable_get('perfanal_pages', '200');
   return 'limit '.($size*2);
}

function pages($page,$db,$url)
{
   $size = variable_get('perfanal_pages', '200');
   $page = ($page==null)?1:$page;
   $output='';
   if($db>=$size || $page>1)
     {
	$output.='<div align=\'center\'><table cellpadding=\'2\'><tr>';
	$output.='<td nowrap>'.l('','&pg=1').'<a href=\''.url($url).'\'>'.'First Page'.'</a></td>';

	for($i=2;$i<$page;$i++)
	  $output.='<td nowrap><a href=\''.url($url).'/&pg='.($i).'\'>'.$i.'</a></td>';

	if($page>=2)
	  $output.='<td nowrap>'.$i.'</td>';
	if($db>=$size)//there is a nother page
	  {

	     $output.='<td nowrap><a href=\''.url($url).'/&pg='.($page+1).'\'>'.'Next Page'.'</a></td>';
	  }
	/*else
	  $output.='<td nowrap><a href=\''.url($url).'/&pg='.($i).'\'>'.'Last Page'.'</a></td>';*/
	
	$output.="</tr></table></div>";
     }

   return $output;
}
/*
function db_query_pages($query,$pos,$url)
{
   $size = variable_get('perfanal_pages', '200');
   $page = $_GET['pg'];
   $page = ($page==null)?1:$page;
  
  $row['pos']= ($page-1)*$size;
  $query.=' limit '.($row['pos']+1).','.($size+1);

  // db_query(' set @pos = 0,@pre = -1;');
   $row['result'] = db_query($query);
   //$rows = db_fetch_object(db_query("SELECT FOUND_ROWS();"))->found_rows;
   $num = db_num_rows($row['result']);

   if($page>1 & $num >1)
     db_fetch_object($row['result']);
   $row['pager'] = pages($page,$num,$url);
   $row['query'] = $query;
   

   return $row;
}
*/

function db_query_pages($query,$pos,$url)
{
   $size = variable_get('perfanal_pages', '200');
   $page = $_GET['pg'];
   $page = ($page==null)?1:$page;

   $query=(($pos==null)?'':' Select SQL_CALC_FOUND_ROWS * FROM(Select if(@pre=(@pre:=p.'.$pos.'),\'-\',@pos:=(@pos+1)) AS pos, p.* from ( ').$query;
   $query.=(($pos==null)?'':' ) as p) as p2  ');
   $query.=' limit '.(($page-1)*$size).','.($size+1);
   $row['pos']= ($page-1)*$size+1;
   db_query(' set @pos = 0,@pre = -1;');
   $row['result'] = db_query($query);
   //$rows = db_fetch_object(db_query("SELECT FOUND_ROWS();"))->found_rows;
   $num = db_num_rows($row['result']);

   if($page>1 & $num >1)
     db_fetch_object($row['result']);
   $row['pager'] = pages($page,$num,$url);
   $row['query'] = $query;

   return $row;
}

//Adition parameter filtering for TM24

class  get_add_params
{
   function get_add_params($t)
     {
	return $t;
     }
}

function sort_by($array,  $keyname = null, $sortby)
{
   $myarray = $inarray = array();
   foreach ($array as $i => $befree)
     {
	$myarray[$i] = $array[$i][$keyname];
     }

   switch ($sortby)
     {
      case 'asc': asort($myarray);
	break;
      case 'arsort': arsort($myarray);
	break;
      case 'natcasesor': natcasesort($myarray);
	break;
     }

   foreach ( $myarray as $key=> $befree)
     {
	$inarray[$key] = $array[$key];
     }

   return $inarray;
}

function perfanal_help($section)
{
   switch($section)
     {
      case 'admin/modules#description':
	  {
	     return t('Performance Analysis based on Team Manager 4');
	  }
	break;
     }
}

function perfanal_perm()
{
   return array('access performance analysis', 'admin performance analysis','aditional performance analysis');
}

function perfanal_menu($may_cache)
{
   $lsc = variable_get('perfanal_lsc', '');
   $cntry = variable_get('perfanal_cntry', '');
   $items = array();
   if ($may_cache)
     {

	$items[] = array('path' => 'meets',
			 'title' => t('Meets'),
			 'callback' => 'perfanal_meets',
			 'access' => user_access('access performance analysis'),
			 'type' =>MENU_NORMAL_ITEM,
			 'weight' => 1);

	$items[] = array('path' => 'ranking',
			 'title' => t((($lsc!='')?$lsc.' ':(($cntry!='')?$cntry.' ':'')).'Rankings'),
			 'callback' => 'perfanal_ranking',
			 'access' => user_access('access performance analysis'),
			 'type' =>MENU_NORMAL_ITEM,
			 'weight' => 2);

	$items[] = array('path' => 'standards',
			 'title' => t('Standards'),
			 'callback' => 'perfanal_standards',
			 'access' => user_access('access performance analysis'),
			 'type' =>MENU_NORMAL_ITEM,
			 'weight' => 4);

	$items[] = array('path' => 'athlete',
			 'title' => t('Athlete Times'),
			 'callback' => 'perfanal_athlete',
			 'access' => user_access('access performance analysis'),
			 'type' =>MENU_NORMAL_ITEM,
			 'weight' => 3);

	$items[] = array('path' => 'records',
			 'title' => t('Records'),
			 'callback' => 'perfanal_records',
			 'access' => user_access('access performance analysis'),
			 'type' =>MENU_NORMAL_ITEM,
			 'weight' => 5);
	

	$seasons = seasons();
	foreach ($seasons as $season => $value)
	  {

		  $items[] = array('path' => 'records/'.$season.'/break',
			 'title' => t('Records Breakers'),
			 'callback' => 'perfanal_record_break',
			 'access' => user_access('access performance analysis'),
			 'type' =>MENU_CALLBACK,
			 'weight' => 5);
		
	     $items[] = array('path' => 'meets/'.$season,
			      'title' => t('Meets '.$value),
			      'callback' => 'perfanal_meets',
			      'access' => user_access('access performance analysis'),
			      'weight' => ('-1.'.$season));

			     $title=(($cntry!='')?$cntry:'').(($cntry!='' & $lsc!='')?'-':'').(($lsc!='')?$lsc:''); 
			     
	     $items[] = array('path' => 'ranking/'.$season,
			      'title' => t($title.' Rankings '.$value),
			      'callback' => 'perfanal_ranking',
			      'access' => user_access('access performance analysis'),
			      'weight' => ('-2.'.$season));

	     $items[] = array('path' => 'athlete/'.$season,
			      'title' => t('Athlete Times '.$value),
			      'callback' => 'perfanal_athlete',
			      'access' => user_access('access performance analysis'),
			      'weight' => ('-3.'.$season));

	     $items[] = array('path' => 'standards/'.$season,
			      'title' => t('Standards '.$value),
			      'callback' => 'perfanal_standards',
			      'access' => user_access('access performance analysis'),
			      'weight' => ('-4.'.$season));

	     $items[] = array('path' => 'records/'.$season,
			      'title' => t('Records '.$value),
			      'callback' => 'perfanal_records',
			      'access' => user_access('access performance analysis'),
			      'weight' => ('-5.'.$season));

	  }

	$items[] = array('path' => 'fina',
			 'title' => t('Fina Points'),
			 'callback' => 'perfanal_fina',
			 'access' => user_access('access performance analysis'),
			 'weight' => 6);
		/*
		$items[] = array('path' => 'report_standard',
				 'title' => t('Nat.G  Standards Statics'),
				 'callback' => 'perfanal_report_standard',
				 'access' => user_access('aditional performance analysis'),
				 'weight' => 7);
		*/
     }else
     {
	$items[] = array('path' => 'optimize',
			 'title' => t('Optimize SWIM DB'),
			 'callback' => 'perfanal_optimize',
			 'access' => user_access('admin performance analysis'),
			 'weight' => -1);
	$items[] = array('path' => 'updaterankings',
			 'title' => t('Update Rankings'),
			 'callback' => 'perfanal_updaterankings',
			 'access' => user_access('admin performance analysis'),
			 'weight' => -1);
			/* 
	$items[] = array('path' => 'top_pages',
			 'title' => t('Perfanal Top Pages'),
			 'callback' => 'perfanal_top_pages',
			 'access' => user_access('admin performance analysis'),
			 'weight' => -1);
*/
	$items[] = array(
			 'path' => 'admin/settings/perfanal',
			 'title' => t('Perfanal'),
			 'description' => t('Swim TM4 Database, display settings configuration.'),
			 'callback' => 'drupal_get_form',
			 'callback arguments' => array('perfanal_admin_settings'),
			 'access' => user_access('admin performance analysis'),
			 'type' => MENU_NORMAL_ITEM, // optional
			 );
     }

   return $items;
}

/* module settings
******************************************************************************************/

function perfanal_admin_settings()
{
   $season = get_seasons(true);
   $tm4db = variable_get('perfanal_database', 'perfanal');

   $form['perfanal_database'] = array('#type' => 'textfield', '#size' => 40, '#max_length' => 40,
				      '#default_value' => variable_get('perfanal_database', 'perfanal'), '#title' => t('Database'),
				      '#description' => t('Specify the name of the database to be used in prefixing all calls to the performance analysis tables.'));

   $form['perfanal_ranking_update'] = array('#title'=>'Rankings Update','#type' => 'select', '#options' => Array('M'=>'Monthly','W'=>'Weekly'), '#default_value' => variable_get('perfanal_ranking_update', 'W'));

   $form['perfanal_ranking_period'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 1,
					    '#default_value' => variable_get('perfanal_ranking_period', '2'), '#title' => t('Weekly Period'),
					    '#description' => t('Weekly Period to update rankings,does not affect Monthly thought'));
					    

   $form['perfanal_ranking_dd'] = array('#type' => 'textfield', '#size' => 3, '#max_length' => 2,
					'#default_value' => variable_get('perfanal_ranking_dd', '01'), '#title' => t('Rankings Season DD'));

   $form['perfanal_ranking_mm'] = array('#type' => 'textfield', '#size' => 3, '#max_length' => 2,
					'#default_value' => variable_get('perfanal_ranking_mm', '01'), '#title' => t('Rankings Season MM'),
					'#description' => t('Used to signify the start and end date of a new season'));

					
   $form['perfanal_ranking_days_before'] = array('#type' => 'textfield', '#size' => 3, '#max_length' => 2,
					'#default_value' => variable_get('perfanal_ranking_days_before', '2'), '#title' => t('Rankings Meet End * Days Before'),
					'#description' => t('Meets will only be include in rankings if there end date is * days before the current rankings date, this allows TM Managers to correct error found.Default is 2 days'));
					
	 $options['y']='Yes';
	 $options['']='No';				
 $form['perfanal_rank_from'] = array('#type' => 'select', '#options' => $options,
				     '#default_value' => variable_get('perfanal_rank_from', 'Y'), '#title' => t('Ranking Include Meets From this Season only'),
				     '#description' => t("Meets before the being of current season month and day will note be include in rankings."));

   $result = db_query("show tables from ".$tm4db." like 'meet\_____'");
   $seas[''] = 'Latest';
   while ($row_data = mysql_fetch_array($result))
     {
	$year = substr($row_data[0], strlen($row_data[0])-4, 4);
	if ($year != "")
	  {
	     $seas[$year] = $year .'-'.($year+1);
	  }
     }

   $form['perfanal_season'] = array('#type' => 'select', '#options' => $seas,
				    '#default_value' => variable_get('perfanal_season', ''), '#title' => t('Default Season'),
				    '#description' => t("Spesify the default Season to be used."));
				    

	/*$result = db_query("SELECT DISTINCT Years From {fina_points}");

	for($i=0;$object = db_fetch_object($result);$i++)
	$rows[$i] = $object->Years;
	$form['ranking_fina'] = array('#title'=>'Rankings Fina, Base Times of year','#type' => 'select', '#options' => $rows, '#default_value' => variable_get('perfanal_ranking_fina', '2004'));
	*/
   //$form['club'] = array('#type' => 'select', '#options' => $club_list, '#default_value' => arg(2));

   $form['perfanal_display_breakers'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 2,
					      '#default_value' => variable_get('perfanal_display_breakers', '20'), '#title' => t('Records Breakers'),
					      '#description' => t('Specify the number of days ago, that records will be classified as broken and promoted to front page. '));

   $form['perfanal_min_display'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
					 '#default_value' => variable_get('perfanal_min_display', '20'), '#title' => t('Minimum Display'),
					 '#description' => t('Specify the minimum about of (results/events) to display on a page. 0 to disable.'));

  
   $form['perfanal_rankcon'] = array('#type' => 'select', '#options' => $options,
				     '#default_value' => variable_get('perfanal_rankcon', ''), '#title' => t('Ranking Meet Confirm'),
				     '#description' => t("Use the santion field as confirmation of weather a meet is excluded from rankings."));
	$options=array();							     
   $options['R']='as in Result';
   $options['T1']='Athlete Team 1';
   $options['T2']='Athlete Team 1/2';
   $options['T3']='Athlete Team 1/2/3';
   $form['perfanal_rank_team'] = array('#type' => 'select', '#options' => $options,
				     '#default_value' => variable_get('perfanal_rank_team', 'R'), '#title' => t('Ranking Team field'),
				     '#description' => t("Spesify how to use the Country and LSC team filtering, note using multiply team fields
				     result in degredation in preformance"));

   $form['perfanal_cntry'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
				   '#default_value' => variable_get('perfanal_cntry', ''), '#title' => t('Country Filter'),
				   '#description' => t("Specify the defalt Country Filter to be used for rankings e.g 'RSA', Leave blank for all"));

   $form['perfanal_cntry_desc'] = array('#type' => 'textfield', '#size' => 35, '#max_length' => 30,
					'#default_value' => variable_get('perfanal_cntry_desc', ''), '#title' => t('Country Description'),
					'#description' => t("The Country description"));

   $form['perfanal_lsc'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
				 '#default_value' => variable_get('perfanal_lsc', ''), '#title' => t('LSC Filter'),
				 '#description' => t("Specify the defalt LSC Filter to be used for rankings e.g 'WP', Leave blank for all"));

		/*
	$form['perfanal_type'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
		'#default_value' => variable_get('perfanal_type', ''), '#title' => t('Meet Type Filter'),
		'#description' => t("Specify the defalt Meet Type Filter to be used for rankings e.g 'OF' or 'ALL', Leave blank for all"));*/
	/*
	$form['perfanal_meet_type_all'] = array('#type' => 'textfield', '#size' => 20, '#max_length' => 35,
		'#default_value' => variable_get('perfanal_meet_type_all', ''), '#title' => t('Meet Type All Desciprtion'),
		'#description' => t("Specify the description for the meet type all"));
	*/

   $results = db_query("Select * From ".$tm4db.".code_".$season." Where TYPE=3");
   $club_list[''] = 'none';
   $club_list['LSC'] = 'LSC - Use Select LSC Filter';
   $club_list['ALL'] = 'All';
   while($object = db_fetch_object($results))
     if($object->ABBR !=null)
       $club_list[$object->ABBR] = ($object->ABBR.' - '.$object->DESC);
   $form['perfanal_type'] = array('#type' => 'select', '#options' => $club_list,
				  '#default_value' => variable_get('perfanal_type', ''), '#title' => t('Meet Type Filter'),
				  '#description' => t("Specify the Meet Type Filter to be used for rankings e.g 'OF' or 'ALL'"));

   $form['perfanal_pages'] = array('#type' => 'textfield', '#size' => 5, '#max_length' => 3,
				   '#default_value' => variable_get('perfanal_pages', '200'), '#title' => t('Pager Result'),
				   '#description' => t("Specify the number of rows to return in reports."));
				   
   $form['perfanal_ranking_timeout'] = array('#type' => 'textfield', '#size' => 3, '#max_length' => 2,
					'#default_value' => variable_get('perfanal_ranking_timeout', '10'), '#title' => t('Script Time Outs'),
					'#description' => t("Maxium amount of time it can take Rankings or Optimizing Script to complete"));


   return system_settings_form($form);
}

/* helper functions
******************************************************************************************/

function extract_seasons()
{
   $tm4db = variable_get('perfanal_database', 'perfanal');
   $result = db_query("show tables from ".$tm4db." like 'athinfo_%'");

   while ($row_data = mysql_fetch_array($result))
     {
	$year = substr($row_data[0], strlen($row_data[0])-4, 4);
	if ($year != "")
	  {
	     $nyear = ($year+1);
	     $season = $year.'/'.substr($nyear, 2, 2);
	     $seasons[$year] = $season;
	  }
     }

   $seasons = array_reverse($seasons, true);

   return $seasons;
}



function perfanal_optimize()
{
   $tm4db = variable_get('perfanal_database', 'perfanal');

   if(arg(1)==null)
     {
	$seasons = seasons();
	$options='';
	foreach($seasons as $season)
	  $options.= '<option '.((arg(1)==$season)?'selected':'').' value="'.$season.'">'.$season.'-'.($season+1).'</option>';
	$Sea = '<select size="1" id="Season">'.$options.'</select>&nbsp;'.$url;

	$output.='Please select the Season<br/>'.$Sea.'<br/><input onclick="document.location=(\''.url('optimize/').'\'+document.getElementById(\'Season\').value+\'/\');" type="button" value="Update">';
     }
   else
     {

	$season = arg(1);
	
	$timeout = variable_get('perfanal_ranking_timeout',10);
	set_time_limit(60*$timeout);
	Ignore_User_Abort(True);
	$output='';
	

		  //Creat aditional fields needed.
		  $output.= "Adding Coloms <br><br>";
		  $output.= "table: code <br>";
		  db_query("Alter Table ".$tm4db.".code_".$season." ADD tindex tinyint");

		  $output.= "table: Meet <br>";
		  db_query("Alter Table ".$tm4db.".meet_".$season." ADD QTSS tinyint, ADD QTS tinyint, ADD QTLS tinyint, ADD QTL tinyint  ");

		  $output.= "table: mtevent <br>";
		  db_query("Alter Table ".$tm4db.".mtevent_".$season." ADD Results smallint ");

		  $output.= "table: result <br>";
		  $commands[]="ADD Fina smallint";
		  $commands[]="ADD RBest tinyint";
		  $commands[]="ADD RType tinyint";
		  $commands[]="ADD RAll tinyint";
		  $commands[]="drop origin";
		  $commands[]="Drop SPLIT";
		  $commands[]="Drop misc";
		  $commands[]="Drop TRANK";
		  $commands[]="Drop Rank";
		  foreach($commands as $table =>$command)
		    {
		       db_query("Alter Table ".$tm4db.".result_".$season." ".$command);
		       $output.="Alter result ".$command."<br>";
		    }
		  $output.= "Alter athlete table Group filed name <br>";
		  db_query("Alter Table ".$tm4db.".athlete_".$season."  change `_group` `group` varchar(3) ");

		  $output.= "Alter Splits table Group filed name <br>";
		  db_query("Alter Table ".$tm4db.".splits_".$season."  drop StrokeRate");

	     

		  //$output.= "Thrashing non swimmers: athlete <br>";
	/*
	db_query("delete From r using".$tm4db.".result_".$season." as r,".$tm4db.".athlete_".$season." as a Where r.athlete = a.athlete and a.group !='A'");
	db_query("delete ".$tm4db.".athlete_".$season." From ".$tm4db.".athlete_".$season." as a where a.Group!='A'");
	*/

		  //add adtional indecies
		  $output.= "Formating table: athinfo <br>";
		  db_query("Alter Table ".$tm4db.".athinfo_".$season." ADD UNIQUE KEY `Athlete` (`Athlete`)");
	    
//		  $output.= "Formating table: athlete<br>";
//		  db_query("Alter Table ".$tm4db.".athlete_".$season." ADD  UNIQUE KEY `Athlete` (`Athlete`),add KEY `Agekey` (`Age`,`Athlete`),add  KEY `ID_NO` (`ID_NO`),add  KEY `LastName` (`Last`,`First`,`Initial`)");
	      

		  $output.= "Formating table: code<br>";
		  db_query("Alter Table ".$tm4db.".code_".$season." ADD  UNIQUE KEY `ABBR` (`ABBR`,`TYPE`) ");
	     
		       db_query("Alter Table ".$tm4db.".result_".$season." ADD KEY `RTYPE` (`RType`) ");
		         db_query("Alter Table ".$tm4db.".result_".$season." ADD KEY `RALL` (`RAll`) ");
		       
//		  $output.= "Formating table: meet<br>";
//		  db_query("Alter Table ".$tm4db.".meet_".$season." ADD UNIQUE KEY `ZID` (`Meet`),add  KEY `MName` (`MName`,`Start`),add KEY `Start` (`Start`)");
	      
  		$output.= "Formating table: meet<br>";
		db_query("Alter Table ".$tm4db.".meet_".$season." add KEY `Start` (`Start`)");
		  $output.= "Formating table: mtevent <br>";
		  db_query("Alter Table ".$tm4db.".mtevent_".$season." ADD  UNIQUE KEY `ZID` (`MtEvent`), add KEY `Meet` (`Meet`,`MtEv`,`MtEvX`)");
	    

		  $output.= "Formating table: mtevente <br>";
		  db_query("Alter Table ".$tm4db.".mtevente_".$season." ADD UNIQUE KEY `ZID` (`MtEvent`),add  KEY `Meet` (`Meet`,`MtEv`,`MtEvX`) ");
	     

		  $output.= "Formating table:records <br>";
		  db_query("Alter Table ".$tm4db.".records_".$season." ADD KEY `ZID` (`record`)");
		  db_query("Alter Table ".$tm4db.".records_".$season." ADD KEY `Hi_Age` (`Distance`,`Stroke`,`Sex`,`I_R`,`Hi_Age`,`Lo_Age`) ");
	      

		  $output.= "Formating table: relay <br>";
		  db_query("Alter Table ".$tm4db.".relay_".$season." ADD UNIQUE KEY `RELAY` (`RELAY`) ");
	     

		  $output.= "Formating table: result<br>";
		  db_query("Alter Table ".$tm4db.".result_".$season." ADD UNIQUE KEY `ZID` (`RESULT`),add  KEY `MEET` (`MEET`,`MTEVENT`,`I_R`,`F_P`), add KEY `Fast` (`ATHLETE`,`COURSE`,`STROKE`,`DISTANCE`) ");
		 
	     
		  $output.= "Formating table: splits<br>";
		  db_query("Alter Table ".$tm4db.".splits_".$season." ADD KEY `SplitID` (`SplitID`,`SplitIndex`)");
	      

//		  $output.= "Formating table: team<br>";
//		  db_query("Alter Table ".$tm4db.".team_".$season." ADD UNIQUE KEY `ZID` (`Team`), add KEY `LSC` (`LSC`,`TCode`)");
	     
		  $query = "Update ".$tm4db.".mtevent_".$season." AS upe,";
		  $query .=" (Select e.MTEVENT AS event,a.sex AS sex, Count(DISTINCT a.sex) as cnt From  ".$tm4db.".mtevent_".$season." as e Cross JOIN ".$tm4db.".result_".$season." as r";
		  $query .=" on e.MtEvent=r.MTEVENT Cross JOIN ".$tm4db.".athlete_".$season." as a on r.ATHLETE=a.Athlete WHERE e.Sex ='X' and e.MtEvX <>'' ";
		  $query .=" Group By e.MTEVENT) As es SET upe.Sex=es.sex";
		  $query .=" WHERE es.cnt=1 and upe.MtEvent=es.event";
		  $output.=$query;
		  $result = db_query($query);
	      

		  //Doing some admin work,formating
		  $query = "UPDATE ".$tm4db.".athlete_".$season." SET Last = TRIM(CONCAT(UCase(LEFT(Last,1)),LCase(SUBSTRING(Last,2))))";
		  $result = db_query($query);
		  $output.= "Formating Last Name<br>";

		  $query = "UPDATE ".$tm4db.".athlete_".$season." SET First = TRIM(CONCAT(UCase(LEFT(FIRST,1)),LCase(SUBSTRING(FIRST,2))))";

		  $result = db_query($query);
		  $output.= "Formating First Name<br>";

	      

		  $output.= "Gender problem with Mixed<br>";

		  $query = "Update ".$tm4db.".mtevent_".$season." as e, (Select MTEVENT, Count(*) AS resultscount From ".$tm4db.".result_".$season." WHERE I_R <> 'L' Group By MTEVENT) as r";
		  $query .= " SET e.Results = r.resultscount";
		  $query .= " Where e.MtEvent=r.MTEVENT";
		  $result = db_query($query);
		  $output.=$query;
		  $output.= "Result counts<br>";


		  $output.= "Reseting Best Time Rank<br>";
		  $result = db_query("Update ".$tm4db.".result_".$season."  as p Set p.RBest = 0");

		  $output.= "Reranking Best Time Rank<br>";

		  $grp='grp'.rand(0,500);
		  db_query("set @".$grp."='0'");
		  
		  //db_query("Set @grp='9';");

		  //db_query("update ".$tm4db.".result_".$season." as r set r.RBest = if((@grp != (@grp:=r.athlete+r.COURSE+r.STROKE+r.distance+r.athlete+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),1,0) order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score");
		  $output.="update ".$tm4db.".result_".$season." as r set r.RBest = if((@".$grp." != (@".$grp.":=r.athlete+r.COURSE+r.STROKE+r.distance+r.athlete+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),1,0) order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score";

		  $query = "Update ".$tm4db.".result_".$season." as up,(select Min(rs.Score),rs.result From (Select r.athlete,r.course,r.stroke,r.distance,r.score,r.result From ".$tm4db.".result_".$season." as r";
		  $query.= " Where r.I_R='I' and r.NT=0 order by r.athlete,r.course,r.stroke,r.distance,r.score) as rs";
		  $query.= " Group by rs.athlete,rs.course,rs.stroke,rs.distance) as res";
		  $query.= " Set up.RBest = 1 WHERE up.result=res.result";
		  $output.=$query;
		  $result = db_query($query);

	     
		  $output.= "Reseting Fina Scores<br>";
		  db_query("Update ".$tm4db.".result_".$season." as p Set p.Fina = 0");

	      

		  $output.= "Calculating Fina Scores male<br>";
		  $query="Update ".$tm4db.".result_".$season." as u, (SELECT r.result,  Round(1000*Pow((f.Score/r.score),3)) as Fina2 FROM ".$tm4db.".result_".$season." as r inner join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete) inner join {fina_points} as f on (r.Course=f.Course and (r.I_R=f.I_R Or (r.I_R='L' And f.I_R='I')) and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex)";
		  $query.=" Where f.years=2004 and r.I_R!='R' and r.NT =0 and a.sex='M') as r";
		  $query.=" Set u.fina = r.fina2 Where u.result = r.result";

	/* This is the fast way with tansaction locing db non mysam
	$query="Update ".$tm4db.".result_2006 as r inner join ".$tm4db.".athlete_2006 as a on (r.ATHLETE=a.Athlete) inner join {fina_points} as f on (r.Course=f.Course and (r.I_R=f.I_R Or (r.I_R='L' And f.I_R='I')) and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex)";
	$query.="Set r.Fina = Round(1000*Pow((f.Score/r.score),3))";
	$query.="Where f.years=2004 and r.I_R!='R' and r.NT =0 and a.sex='M';";*/
		  $output.=$query;
		  db_query($query);

	     
		  $output.= "Calculating Fina Scores female <br>";

		  $query="Update ".$tm4db.".result_".$season." as u, (SELECT r.result,  Round(1000*Pow((f.Score/r.score),3)) as Fina2 FROM ".$tm4db.".result_".$season." as r inner join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete) inner join {fina_points} as f on (r.Course=f.Course and (r.I_R=f.I_R Or (r.I_R='L' And f.I_R='I')) and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex)";
		  $query.=" Where f.years=2004 and r.I_R!='R' and r.NT =0 and a.sex='F') as r";
		  $query.=" Set u.fina = r.fina2 Where u.result = r.result";

		  db_query($query);

	      

		  $output.= "Doing some Db enqueries to enhance functionality<br>";

		  $result = db_query("Update ".$tm4db.".meet_".$season."  as up  Set up.QTSS = 0, up.QTS = 0, up.QTLS = 0, up.QTL = 0");

		  $query="Update ".$tm4db.".meet_".$season." as up,(Select e.Meet,If(sum( If(e.FastCut>0 ,1,0)),1,0) as QTS,If(sum(If(e.SlowCut>0,1,0)),1,0) as QTSS,If(sum(If(e.Fast_L>0,1,0)),1,0) as QTL,If(sum(if(e.Slow_L>0,1,0)),1,0) as QTLS";
		  $query.=" FROM ".$tm4db.".mtevente_".$season." as e,".$tm4db.".meet_".$season." as m where m.meet=e.Meet group by meet) as rs";

		  $query.=" Set up.QTSS = rs.QTSS, up.QTS = rs.QTS, up.QTLS = rs.QTLS, up.QTL = rs.QTL";

		  $query.=" Where up.meet = rs.meet";
		  $result = db_query($query);

	/*
	Query to precheack subsite links
	$query="update ".$tm4db.".athlete_".$season." as up,(select a.athlete,s.site from ".$tm4db.".athlete_".$season." as a inner join ".$tm4db.".team_".$season." as t on (a.team1=t.team), {perfanal_subsites} as s ";
	$query=" Where s.enabled=true and t.lsc = s.lsc) as r 	Set up.subsite = r.site	WHERE up.athlete=r.athlete";

	*/

	      
		  db_query("update ".$tm4db.".code_".$season." Set tindex = 0;");
		  db_query("set @pos=-1;");
		  db_query("update ".$tm4db.".code_".$season."	Set tindex = (@pos:=@pos+2) WHERE type=3 and abbr !='' order by abbr");
	      

	/*
	$output.= "Formating table: <br>";
	db_query("Alter Table ".$tm4db.".athinfo_".$season." ");
	*/

		  //minipulation of time standard tables
		  $query = "Select LCase(StdFile) as std from ".$tm4db.".stdname_".$season." ";
		  $result = db_query($query);
		  while($object = db_fetch_object($result))
		    {
		       $output.= "Formating standard table: ".$object->std."<br>";
		       db_query("Alter Table ".$tm4db.".".$object->std."_".$season." Add UNIQUE KEY `ZID` (`Std`), Add UNIQUE KEY `Distance` (`Distance`,`Stroke`,`Sex`,`I_R`,`Hi_age`,`Lo_Age`)");

		    }       
		  variable_set('perfanal_'.arg(1).'_ranking_last_update', '');
		   cache_clear_all('perfanal', 'cache', TRUE);
		   cache_clear_all('perfanal', 'cache_filter', TRUE);
		    cache_clear_all('*', 'cache_page', TRUE);
		  

	      
	  $output.="<br>".l("Click Here update rankings and to finsh the setup.",'ranking/'.arg(1));
     }
   return $output;
}



function perfanal_updaterankings()
{

   $edit = $_POST["edit"];

   $tm4db = variable_get('perfanal_database', 'perfanal');
   if(arg(1)==null)
     {
	$seasons = seasons();
	$options='';
	foreach($seasons as $season)
	  $options.= '<option '.((arg(1)==$season)?'selected':'').' value="'.$season.'">'.$season.'-'.($season+1).'</option>';
	$Sea = '<select size="1" id="Season">'.$options.'</select>&nbsp;'.$url;

	$output.='Please select the Season<br/>'.$Sea.'<br/><input onclick="document.location=(\''.url('updaterankings/').'\'+document.getElementById(\'Season\').value+\'/\');" type="button" value="Update Rankings">';
	$output.='&nbsp;<input onclick="document.location=(\''.url('updaterankings/').'\'+document.getElementById(\'Season\').value+\'/reset\');" type="button" value="Reset Rankings">';
     }
   else
     {
	     if(arg(2)=='reset')
	     {
		     variable_set('perfanal_'.arg(1).'_ranking_last_update', '');
		     $output.='Rankings '.$season.' have been reset.';
		     $output.='<br/><br/>'.l('Update Current Rankings','updaterankings/'.arg(1).'/');
	     }
	     else
	     {
		 $output.=perfanal_automated_rankings_Update(arg(1));
	     }
     }
   return $output;
}

function perfanal_automated_rankings_Update($season)
{
	$last_ranking = variable_get('perfanal_'.$season.'_ranking_last_update', getDate());
	   $rankdate = ranking_date($season);
	   if($last_ranking != $rankdate['date'])
	   {
	variable_set('perfanal_'.$season.'_ranking_start_time',date('Y-m-d', time()));
	
	$timeout = variable_get('perfanal_ranking_timeout',10);
	set_time_limit(60*$timeout);
	Ignore_User_Abort(True);
	$tm4db = variable_get('perfanal_database', 'perfanal');
	variable_set('perfanal_'.$season.'_ranking_updating',true);
	
	{
	$last_ranking = variable_get('perfanal_'.$season.'_ranking_last_update', getdate());
	$lsc = variable_get('perfanal_lsc', '');
	$cntry = variable_get('perfanal_cntry', '');
	$confirm = variable_get('perfanal_rankcon', '');
	$rankdate = ranking_date($season);

	
	     $ranktype = $rankdate['type'];
	     $rankdate = $rankdate['date'];
	     
	     $rank_from_option = variable_get('perfanal_rank_from','y');
	     $rank_days_before = variable_get('perfanal_ranking_days_before','2');
	     
	      $Sd = variable_get('perfanal_ranking_dd', '01');
	      $Sm = variable_get('perfanal_ranking_mm', '01');
	     $from_date = $season.'-'.$Sm.'-'.$Sd;
	     

	     $ranking_stage = variable_get('perfanal_'.$season.'_ranking_stage', 0);
	     //Updates Athelte Ages
	     if($ranking_stage <1)
	       {
		  variable_set('perfanal_'.$season.'_ranking_type', $ranktype);
		  $query.="UPDATE ".$tm4db.".athlete_".$season." as a Set a.Age = extract(YEAR FROM from_days(datediff('".$rankdate."', a.Birth)))";
		  db_query($query);
		  variable_set('perfanal_'.$season.'_ranking_stage', 1);
		$ranking_stage++;
	       }

	     //Set up team filters for all times match lsc and cntry settings.
	    
	     $filter='';
	     
	     if($cntry!='' || $lsc!='')
	     {
		      	$team_option = variable_get('perfanal_rank_team','R');
			
		       $filter.=" from ".$tm4db.".team_".$season." Where ";
		       if($cntry!='')
		       $filter.=" TCntry='".$cntry."' ";
		       if($cntry!='' & $lsc!='')
		       $filter.=" and ";
		       if($lsc!='')
		       $filter.=" lsc='".$lsc."' ";		
		       if($team_option=='R')
		       $filter= " and  r.team in (Select team".$filter.') ';
		       
		       if( strpos($team_option,'T')!==false)
		       {$team = strpos($team_option,'T');
		       $filter_team= ' and  r.athlete in (SELECT distinct athlete from '.$tm4db.'.athlete_'.$season.' WHERE (';
			       if($team_option=='T1' || $team_option=='T2' || $team_option=='T3')
			       $filter_team.=' team1 in (Select team '.$filter.')';
			       if($team_option=='T2' || $team_option=='T3')
			       $filter_team.='or team2 in (Select team '.$filter.')';
			       if($team_option=='T3')
			       $filter_team.='or team3 in (Select team '.$filter.')';
		       $filter_team.= '))';
		       $filter =  $filter_team;
		       }

	     }
	     if($ranking_stage <2)
	       {
		  //All Meet Type's
		  db_query("Update ".$tm4db.".result_".$season." as r Set r.RAll = 0");
		  variable_set('perfanal_'.$season.'_ranking_stage', 2);
		 $ranking_stage++;
	       }
		     

	     if($ranking_stage <3)
	       {
		    $grp='grp'.rand(0,500);
		   db_query("set @".$grp."='0'");
		  $query=" update ".$tm4db.".result_".$season." as r";
		  $query.=" set r.RAll = if((@".$grp." != (@".$grp.":=r.athlete+r.COURSE+r.STROKE+r.distance+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),1,if(r.points>0,2,127))";
		  $query.=" Where r.meet in (SELECT m.Meet From ".$tm4db.".meet_".$season." as m Where (DATEDIFF(m.END,'".$rankdate."') <=-".$rank_days_before.") ".(($rank_from_option=='y')?(" and (DATEDIFF(m.END,'".$from_date."') >=0) "):'')." ".(($confirm !='' & $cntry!='')?" and (isnull(m.sanction) or INSTR(m.sanction,'".$cntry."')=0) ":'').")";
		  $query.=$filter; // append team filters
		  $query.=" order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score;";
		// $output.=$query;
		
		  db_query($query);
		  variable_set('perfanal_'.$season.'_ranking_stage', 3);
		$ranking_stage++;
	       }
	     $meet_type = variable_get('perfanal_type', '');
	     if($meet_type !='ALL' & $meet_type !='LSC')//$meet_type !='' 
	       {
		  //updating Meet type rankings
		  if($ranking_stage <4)
		    {
		       db_query("Update ".$tm4db.".result_".$season." as r Set r.RType = 0");
		       variable_set('perfanal_'.$season.'_ranking_stage', 4);
		    $ranking_stage++;
		    }

		  $results = db_query("Select tindex,abbr from ".$tm4db.".code_".$season." Where type=3 and tindex >".($ranking_stage-4)." order by tindex asc");
		  $grp='grp'.rand(0,500);
			
		  while($object = db_fetch_object($results))
		  {
		        db_query("set @".$grp."='0'");
		       $query=" update ".$tm4db.".result_".$season." as r";
		       $query.=" set r.RType = if((@".$grp." != (@".$grp.":=r.athlete+r.COURSE+r.STROKE+r.distance+r.NT+r.I_R) and r.NT=0 and r.I_R != 'R'),".$object->tindex.",if(r.POINTS>0,".($object->tindex+1).",127))";
		       $query.=" Where ".(($object->tindex>2)?' r.Rtype=0 and ':'')." r.meet in (SELECT m.Meet From ".$tm4db.".meet_".$season." as m Where m.type='".$object->abbr."' and (DATEDIFF(m.END,'".$rankdate."') <=-".$rank_days_before.") ".(($rank_from=='y')?" and (DATEDIFF(m.END,'".$from_date."') >=0) ":'')." ".(($confirm !='' & $cntry!='')?" and (isnull(m.sanction) or INSTR(m.sanction,'".$object->abbr."')=0) ":'')." )";
		       $query.=$filter; // append team filters
		       $query.=" order by r.Athlete,r.Course,r.Stroke,r.Distance,r.score;";
		    //   $output.=$query;
		       
		       db_query($query);
		       $output.="Meet Type:".$object->abbr."<br/>";

		       variable_set('perfanal_'.$season.'_ranking_stage', ($object->tindex+4));
		      $ranking_stage=$object->tindex+5;

		    }
		 
	       }
	    
		  variable_set('perfanal_'.$season.'_ranking_updating',false);
		  variable_set('perfanal_'.$season.'_ranking_last_update', $rankdate);
		  variable_set('perfanal_'.$season.'_ranking_stage', 0);
	
	       

	     //update fina points
	     	$output.='Rankings '.$season.' Have been updated'; 
	   }}else
	   {
		   $output='Rankings '.$season.' are up to date';
		   $output.='<br/><br/>'.l('Rest current Rankings','updaterankings/'.arg(1).'/reset');
	   }
	   cache_clear_all('*', 'cache_page', TRUE);
   return $output;
	  
}

function perfanal_report_standard()
{
   $edit = $_POST["edit"];
   $seasons = extract_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');

   $season = (($edit["season"]) ? $edit["season"] : '');
   if (!$season)
     {
	$rev_seasons = array_reverse($seasons, true);
	foreach ($rev_seasons as $key => $value)
	  $season = $key;
     }

   if(arg(1)==null)
     {
	drupal_set_title('National Gala Standards Statistics');
	$output.="Please select a meet from which its rules may be used, with the standard.";

	$headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
	$headers[] = array('data' => t('Type'), 'width' => '20px');
	$headers[] = array('data' => t('Start date'), 'width' => '100px','sort' => 'desc','field' => 'm.Start');
	$headers[] = array('data' => t('End date'), 'width' => '100px');
	$headers[] = array('data' => t('Course'), 'width' => '40px');
	$headers[] = array('data' => t('Location'));
	// order by m.Start DESC
	//
	$result = db_query("select SQL_CACHE DISTINCT IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$season." m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Start >CURDATE()".tablesort_sql($headers));

	while ($object = db_fetch_object($result))
	  {
	     $link = 'report_standard/'.$object->Meet;
	     $rows[] = array('data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location),'class'=>'onlythis');
	  }
	$output.= theme_table($headers, $rows,NULL,NULL);

	return $output;
     }
   else
     {
	if(arg(2)==null)
	  {
	     drupal_set_title("National Gala Standards Statistics");

	     $output.="Please select a standard.";

	     $headers[] = array('data' => t('Name'), 'width' => '100px');
	     $headers[] = array('data' => t('Description'), 'width' => '150px');
	     $headers[] = array('data' => t('Year'), 'width' => '40px');

	     $results = db_query("Select StdFile,Descript,Year From ".$tm4db.".stdname_".$season." Order BY Year desc,StdFile");

	     while($object = db_fetch_object($results))
	       $rows[] = array(l($object->StdFile,'report_standard/'.arg(1).'/'.$object->StdFile),$object->Descript,$object->Year);

	     return $output.theme('table', $headers, $rows);
	  }
	else
	  {

	     $result = db_query("Select * From ".$tm4db.".stdname_".$season." Where StdFile='%s' ",arg(2));
	     $object = db_fetch_array($result);
	     $sc_pre='';
	     $sc_suf='';
	     $lc_pre='';
	     $lc_suf='';
	     $qt='';
	     for($i=0;$i<12;$i++)
	       {
		  if($object['D'.($i+1).''] != null)
		    {
		       $des[] = $object[('D'.($i+1))];
		       $qt.='S'.$i.',F'.$i.',S'.($i+12).',F'.($i+12).',';
		       $sc_pre.= "IF(IF((S".$i.">0)||(F".$i.">0)||(S".($i+12).">0)||(F".($i+12).">0),IF(S".$i.">0, If(S".$i.">=Score,1,0),1) && IF(F".$i.">0, If(F".$i."<=Score,1,0),1),1),".$i.",";
		       $sc_suf.=")";
		       $lc_pre.= "IF(IF((S".$i.">0)||(F".$i.">0)||(S".($i+12).">0)||(F".($i+12).">0),IF(S".($i+12).">0, If(S".($i+12).">=Score,1,0),1) && IF(F".($i+12).">0, If(F".($i+12)."<=Score,1,0),1),1),".($i).",";
		       $lc_suf.=")";

		    }

	       }

	     $STD = $object['StdFile'];
	     if(db_num_rows($result)>0)
	       {
		  $result = db_query("select m.*,IF(m.AgeUp=null,m.Start,m.AgeUp) as AgeUp from ".$tm4db.".meet_".$season." as m Where m.meet=%d",arg(1));
		  $object = db_fetch_object($result);

		  drupal_set_title($object->MName.", ".arg(2)." - National Gala Standards Statistics");

		  $sel='';
		  if($object->Course=='L' || $object->Course=='S')
		    {
		       $sel="If(Course='L',".$lc_pre.' 99'.$lc_suf.','.$sc_pre.' 99'.$sc_suf.') as qt ';
		       $sel.='';
		    }
		  else
		    if($object->Course=='LO')
		      $sel=$lc_pre.' 99'.$lc_suf.' as qt ';
		  else
		    $sel=$sc_pre.' 99'.$sc_suf.' as qt ';

		  $query = "Select r.*, e.Lo_Age,e.Hi_Age,e.Sex,".$qt.' '.$sel." From ".$tm4db.".".strtolower($STD)."_".$season." as e left JOIN ";
		  $query.= " (Select r.*, MIN(score2) as Score, extract(YEAR FROM from_days(datediff('".$object->AgeUp."', Birth))) as Ages FROM (select m.MName,m.Start,r.Meet,r.I_R,r.Score as score2,r.Stroke,r.Distance,r.Course,";
		  $query.=" a.* FROM (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".meet_".$season." as m on (r.meet=m.meet )) inner JOIN ".$tm4db.".athlete_".$season." as a on (r.athlete=a.athlete) ";
		  $query.=" WHERE r.NT=0 and r.I_R !='R'".(($object->Since ==null)?'':"and m.Start >= '".$object->Since."'").(($object->RestrictBest==False)?'':" and m.Type='".$object->Type."'")."  and ".(($object->Course=='L'||$object->Course=='S'?"r.Course!='Y'":"r.Course='".substr($object->Course,0,1)."'"))."  order by a.athlete,stroke,distance,course,score) as r group BY athlete,stroke,distance,course) as r on ((r.stroke=e.STROKE) and (r.distance=e.DISTANCE) and (r.sex=e.sex))";
		  $query.=" where r.Ages>=e.Lo_Age and r.Ages <=e.Hi_Age ".(($object->Age < $object->MinAge)?'and Not(e.Lo_Age=0 and e.Hi_Age=99)':'')." order by athlete,stroke,distance,qt,course desc";

		  $query = "SELECT c._desc,Sex,mqt, Count(athlete) as ath from (Select Athlete,SubGr,Sex,Min(qt) as mqt From(".$query.") as re Where re.qt<99 group by athlete ) as re left join ".$tm4db.".code_".$season." as c on (re.SubGr=c.ABBR ) Where c.TYPE=1 GROUP by SubGr,Sex,mqt with ROLLUP";

		  $headers[] = array('data' => t('Races'), 'width' => '100px');
		  $headers[] = array('data' => t('Gender'), 'width' => '60px');
		  $headers[] = array('data' => t('STD'), 'width' => '60px');
		  $headers[] = array('data' => t('Amount'), 'width' => '60px');

		  $results = db_query($query);

		  while($object = db_fetch_object($results))
		    $rows[] = array($object->DESC,($object->Sex==null)?(array('data'=>'Total','class'=>'green')):Gender($object->Sex),($object->mqt==null)?(($object->Sex==null)?array('data'=>'','class'=>'green'):(array('data'=>'Total','class'=>'green'))):$des[$object->mqt],($object->mqt==null)?array('class'=>'green','data'=>$object->ath):$object->ath);
	       }
	     return theme('table', $headers, $rows);
	  }
     }
}
function perfanal_standards()
{
   $edit = $_POST["edit"];
   $season = get_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');

   switch(arg(2))
     {
      case 'age':
	  {
	     $results = db_query("Select SQL_CACHE * From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(3)));
	     $object = db_fetch_array($results);
	     drupal_set_title($object['StdFile'].(($object['Descript']==NULL)?'':' - '.$object['Descript'])." Standards &nbsp;&nbsp;".Age(arg(4)));
	     setseasons_breadcrumb(array(l('Time Standards','standards/'.arg(1)),l('Age Groups','standards/'.arg(1).'/ages/'.arg(3))));
	     $headers[] = array('data' => t('Distance'), 'width' => '50px');
	     $headers[] = array('data' => t('Stroke'), 'width' => '70px');
	     $headers[] = array('data' => t('I/R'), 'width' => '20px');
	     $headers[] = array('data' => t('Div'), 'width' => '20px');

	     $count=0;
	     for($i=1;$i<13;$i++)
	       if($object['D'.$i]!=null & trim($object['D'.$i])!= '')
		 {
		    $headers[] = array('data' => t($object['D'.$i]),'width' =>'80px','title'=> $object['D'.$i.'Des']);
		    $count++;
		 }
	     //Set course
	     $coloms=(arg(5)=='L')?12:0;

	     $output.="<br><div class='tabs'><ul class='tabs primary'>";
	     $output.="<li ".((arg(5)=='L')?"class='active'":'').">".l('Long Course 50m','standards/'.arg(1).'/age/'.arg(3).'/'.arg(4).'/L')."</li>";
	     $output.="<li ".((arg(5)=='S')?"class='active'":'').">".l('Short Course 25m','standards/'.arg(1).'/age/'.arg(3).'/'.arg(4).'/S')."</li>";
	     $output.="</ul></div><br><br>";

	     $output.="<table><tr><td>";
	     if(db_num_rows($results)>0)
	       {
		  $results = db_query("SELECT * from ".$tm4db.".".strtolower($object['StdFile'])."_".$season." Where Lo_Age =%d and Hi_Age =%d Order by Sex,I_R,Stroke,Distance",floor((arg(4)/100)),(arg(4)%100));

		  //Grouping
		  $Gender=null;

		  while($object = db_fetch_array($results))
		    {
		       if($Gender <> $object['Sex'])
			 {
			    $Gender = $object['Sex'];
			    if($rows !=NULL)
			      $output.= theme('table', $headers, $rows).'<br>';
			    $output.= '<p align=\'center\'><b>'.t(Gender($object['Sex'])).'</b></p>';
			    $rows = NULL;
			 }
		       $temp[] = $object['Distance'];
		       $temp[] = Stroke($object['Stroke']);
		       $temp[] = $object['I_R'];
		       $temp[] = $object['Division'];
		       for($c=$coloms;$c<$count+$coloms;$c++)
			 $temp[] = get_time($object['S'.$c.'']);
		       $rows[]=$temp;
		       $temp=null;
		    }
	       }
	     $output.=theme('table', $headers, $rows);
	     $output.="</tr></td></table>";
	     return $output;
	  }
	break;

      case 'ages':
	  {
	     $results = db_query("Select SQL_CACHE StdFile,Descript From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(3)));
	     $object = db_fetch_object($results);
	     drupal_set_title($object->StdFile.(($object->Descript==NULL)?'':' - '.$object->Descript)." Standards");
	     setseasons_breadcrumb(array(l('Time Standards','standards/'.arg(1))));
	     $headers[] = array('data' => t('Age Group'), 'width' => '120px');
	     if(db_num_rows($results)>0)
	       {
		  $results = db_query("Select distinct ((Lo_Age*100)+Hi_Age) as Age From ".$tm4db.".".strtolower($object->StdFile)."_".$season." ORDER by Lo_Age,Hi_Age");
		  if(db_num_rows($results)==1)
		    {
		       $object = db_fetch_object($results);
		       drupal_goto('standards/'.arg(1).'/age/'.arg(3).'/'.$object->Age.'/L');
		    }
		  while($object = db_fetch_object($results))
		    $rows[] = array(l(Age($object->Age),'standards/'.arg(1).'/age/'.arg(3).'/'.$object->Age.'/L'));
	       }
	     return theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);

	  }
	break;

      default:
	  {
	     drupal_set_title("Time Standards");
	     setseasons_breadcrumb(null);
	     $headers[] = array('data' => t('Name'), 'width' => '100px');
	     $headers[] = array('data' => t('Description'), 'width' => '150px');
	     $headers[] = array('data' => t('Year'), 'width' => '40px');

	     $results = db_query("Select SQL_CACHE StdFile,Descript,Year From ".$tm4db.".stdname_".$season." Order BY Year desc,StdFile");

	     while($object = db_fetch_object($results))
	       $rows[] = array(l($object->StdFile,'standards/'.arg(1).'/ages/'.$object->StdFile),$object->Descript,$object->Year);

	     return theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
	  }
	break;
     }

}

function perfanal_block($op = 'list', $delta = 0, $edit = array()) {
 switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Automated scroll Record Breakers');
      return $blocks;
    case 'configure':
      $form = array();
      if ($delta == 0) {
        $form['perfanal_records_breakers_atonce'] = array(
          '#type' => 'textfield',
          '#title' => t('Display number'),
          '#size' => 2,
          '#description' => t('This is the amount of records to display at once.'),
          '#default_value' =>variable_get('perfanal_records_breakers_atonce',  8)
        );
      }
      return $form;
    case 'save':
       if ($delta == 0) {
        // Have Drupal save the string to the database.
        variable_set('perfanal_records_breakers_atonce', $edit['perfanal_records_breakers_atonce']);
      }
      return;
    case 'view': default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.
      switch ($delta) {
        case 0:
          $block['subject'] =  'Congratulations to the following Record Breakers';
          $block['content'] = block_prefanal_record_breakers();
          break;
      }
      return $block;
  }
}

function block_prefanal_record_breakers()
{
	     $season = get_cur_seasons();
		$breakers_days = variable_get('perfanal_display_breakers', '30');
	     $output="<div id='record_breakers'><input type='hidden' id='record_url' value='".url('records/'.$season.'/break')."'></div>";
	     drupal_add_js(path().'/js/ajax.js',null,'footer',true);
	     drupal_add_js(path().'/js/records.js',null,'footer',true);
	     return $output;	
}

function perfanal_record_break()
{
	$tm4db = variable_get('perfanal_database', 'perfanal');
	 $season = get_cur_seasons();
	  $rec_return = variable_get('perfanal_records_breakers_atonce',  8);
	     $breakers_days = variable_get('perfanal_display_breakers', '30');
	    $results = db_query("SELECT SQL_CACHE n.*, r.*,((r.Lo_Age*100)+r.Hi_Age) as Age  from ".$tm4db.".recname_".$season." as n inner join ".$tm4db.".records_".$season." as r on (n.record = r.Record) Where r.I_R='I' and  DATEDIFF(CURDATE(),r.RecDate)<=".$breakers_days." ".(arg(3)?' and n.record='.arg(3):''). " Order by r.recdate desc limit ".((arg(3)*8)+1).','.$rec_return);
	     $rec='';
	     while($object = db_fetch_object($results))
	       {
		       $rec.= "<div class='record'>";
		       $rec.= "<div class='left'>".LO_HI($object->Lo_Age,$object->Hi_Age).'<br>'.get_time($object->RecTime).'</div>';
		       $rec.= "<p class='right'>".$object->Distance.'m '.Stroke($object->Stroke).' '.$object->RecFile.' Record '.$object->Year.', <b>'.l($object->RecText,'records/'.$season.'/ages/'.$object->Record.'/'.$object->Age).'</b>&nbsp;'.$object->RecLSC.($object->RecLSC!=null?'-':'').$object->RecTeam.' </p></div>';
	       }
	   
	     print $rec;
	       exit();	
}



function perfanal_records()
{
   $edit = $_POST["edit"];
   $season = get_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');

   switch(arg(2))
     {
	     
      case 'age':
	  {
	     $breakers_days = variable_get('perfanal_display_breakers', '30');
	     $results = db_query("Select SQL_CACHE * From ".$tm4db.".recname_".$season." Where Record=%d",arg(3));
	     $object = db_fetch_object($results);
	     drupal_set_title($object->RecFile.' - '.$object->Descript.' Records &nbsp;&nbsp;'.Age(arg(4)));
	     setseasons_breadcrumb(array(l('Records','records/'.arg(1)),l('Age Groups','records/'.arg(1).'/ages/'.arg(3))));
	     $headers[] = array('data' => t('Time'), 'width' => '70px');
	     $headers[] = array('data' => t('Dis'), 'width' => '30px');
	     $headers[] = array('data' => t('Stroke'), 'width' => '70px');
	     $headers[] = array('data' => t('I/R'), 'width' => '20px');
	     $headers[] = array('data' => t('Holder'), 'width' => '400px');
	     $headers[] = array('data' => t('Date'), 'width' => '80px');
	     $headers[] = array('data' => t('Team'), 'width' => '70px');
	     $headers[] = array('data' => t('Ex'), 'width' => '20px');
	     $headers[] = array('data' => t('Div'), 'width' => '20px');

	     $results = db_query("SELECT *, if(DATEDIFF(CURDATE(),RecDate)<=".$breakers_days.",1,0)  as highlight from ".$tm4db.".records_".$season." Where record=%d and Lo_Age =%d and Hi_Age =%d  Order by Course,Sex,I_R,Stroke,Distance",arg(3),floor((arg(4)/100)),(arg(4)%100));
	      //Grouping
	     $Gender=null;
	     $Course=null;

	     while($object = db_fetch_object($results))
	       {
		  if($Gender <> $object->Sex ||$Course <> $object->Course )
		    {
		       $Gender = $object->Sex;
		       $Course = $object->Course;
		       if($rows !=NULL)
			 $output.= theme('table', $headers, $rows).'<br>';
		       $output.= '<p align=\'center\'><b>'.t(Course(1,$object->Course).' - '.Gender($object->Sex)).'</b></p>';
		       $rows = NULL;
		    }

		  $rows[] = array('class'=>($object->highlight==1?'highlight':''), 'data'=>array(get_time($object->RecTime),$object->Distance,Stroke($object->Stroke),$object->I_R,$object->RecText,get_date($object->RecDate),$object->RecLSC.'-'.$object->RecTeam,$object->Ex,$object->Division));
	       }
	     $output.=theme('table', $headers, $rows);
	     return $output;
	  }
	break;

      case 'ages':
	  {
	     $results = db_query("Select SQL_CACHE * From ".$tm4db.".recname_".$season." Where Record=%d",arg(3));
	     $object = db_fetch_object($results);
	     drupal_set_title($object->RecFile." Records");
	     setseasons_breadcrumb(array(l('Records','records/'.arg(1))));
	     $headers[] = array('data' => t('Age Group'), 'width' => '120px');

	     $results = db_query("Select SQL_CACHE  distinct ((Lo_Age*100)+Hi_Age) as Age From ".$tm4db.".records_".$season." Where Record=%d ORDER by Lo_Age,Hi_Age",arg(3));
	     if(db_num_rows($results)==1)
	       {
		  $object = db_fetch_object($results);
		  drupal_goto('records/'.arg(1).'/age/'.arg(3).'/'.$object->Age);
	       }
	     while($object = db_fetch_object($results))
	       $rows[] = array(l(Age($object->Age),'records/'.arg(1).'/age/'.arg(3).'/'.$object->Age));

	      $output='<br/>'.l('Lastest Records Breakers','records/'.arg(1).'/latest/'.arg(3));
	       
	     return $output.=theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);

	  }
	break;
	

	 case 'latest':
	  {
	     $breakers_days = variable_get('perfanal_display_breakers', '30');
	     $results = db_query("Select SQL_CACHE * From ".$tm4db.".recname_".$season." Where Record=%d",arg(3));
	     $object = db_fetch_object($results);
	     drupal_set_title((arg(3)==null?'':$object->RecFile.', '.$object->Descript.' - '.$object->Year).' Latest Records Breakers');
	     $bread[] =l('Records','records/'.arg(1));
	     if(arg(3)!=null)
	      $bread[] = l('Age Groups','records/'.arg(1).'/ages/'.arg(3));
	     setseasons_breadcrumb($bread);
	     $headers[] = array('data' => t('Time'), 'width' => '70px');
	     $headers[] = array('data' => t('Age'));
	     $headers[] = array('data' => t('Dis'), 'width' => '30px');
	     $headers[] = array('data' => t('Stroke'), 'width' => '70px');
	     $headers[] = array('data' => t('I/R'), 'width' => '20px');
	     $headers[] = array('data' => t('Holder'), 'width' => '350px');
	     $headers[] = array('data' => t('Date'), 'width' => '80px');
	     $headers[] = array('data' => t('Team'), 'width' => '70px');
	     $headers[] = array('data' => t('Ex'), 'width' => '20px');
	     $headers[] = array('data' => t('Div'), 'width' => '20px');

	     $results = db_query("SELECT n.*, r.*  from ".$tm4db.".recname_".$season." as n inner join ".$tm4db.".records_".$season." as r on (n.record = r.Record) Where DATEDIFF(CURDATE(),r.RecDate)<=".$breakers_days." ".(arg(3)?' and n.record='.arg(3):''). " Order by n.recfile,n.record,r.course,r.sex,r.RecDate desc");
	      //Grouping
	     $Rec=null;
	     $Gender=null;
	     $Course=null;
	     
	     /*
	      $rec='';
	     while($object = db_fetch_object($results))
	       {
		    if($Rec <> $object->Record & arg(3)==null )
		    {
		       $Rec = $object->Record;
		       $rec.= '<p class=\'highlight\' align=\'center\'><b>'.$object->RecFile.', '.$object->Descript.' - '.$object->Year.'</b></p>';
		    }
		       
		  if($Gender <> $object->Sex ||$Course <> $object->Course )
		    {
		       $Gender = $object->Sex;
		       $Course = $object->Course;
		       $rec.= '<div align=\'center\'><b>'.t(Course(1,$object->Course).' - '.Gender($object->Sex)).'</b></div>';
		    }
		       $rec.= "<table class='record'>";
		       $rec.= "<tr><td class='left' valign='top' align='left'>".LO_HI($object->Lo_Age,$object->Hi_Age).'<br>'.get_time($object->RecTime).'</td>';
		       $rec.= "<td valign='top'>".$object->Distance.'m '.Stroke($object->Stroke).' '.$object->RecFile.' Record '.$object->Year.',<br>'.l($object->RecText,'records/'.$season.'/ages/'.$object->Record.'/'.$object->Age).'&nbsp;'.$object->RecLSC.($object->RecLSC!=null?'-':'').$object->RecTeam.' </td></tr></table>';

		       
		 
	       }
	     $output.='<div width=\'400px\'>'.$rec.'</div>';
	     */

	     while($object = db_fetch_object($results))
	       {
		       
		    if($Rec <> $object->Record & arg(3)==null )
		    {
		       $Rec = $object->Record;
		       if($rows !=NULL)
		       $output.= theme('table', $headers, $rows).'<br>';
		       $output.= '<p class=\'highlight\' align=\'center\'><b>'.$object->RecFile.', '.$object->Descript.' - '.$object->Year.'</b></p>';
		       $rows = NULL;
		    }
		       
		  if($Gender <> $object->Sex ||$Course <> $object->Course )
		    {
		       $Gender = $object->Sex;
		       $Course = $object->Course;
		       if($rows !=NULL)
			 $output.= theme('table', $headers, $rows).'<br>';
		       $output.= '<div align=\'center\'><b>'.t(Course(1,$object->Course).' - '.Gender($object->Sex)).'</b></div>';
		       $rows = NULL;
		    }

		  $rows[] = array(get_time($object->RecTime),LO_HI($object->Lo_Age,$object->Hi_Age),$object->Distance,Stroke($object->Stroke),$object->I_R,$object->RecText,get_date($object->RecDate),$object->RecLSC.'-'.$object->RecTeam,$object->Ex,$object->Division);
	       }
	     $output.=theme('table', $headers, $rows);

	     return $output;
	  }
	break;

      default:
	  {
	     drupal_set_title("Records");
	     setseasons_breadcrumb(null);
	     $headers[] = array('data' => t('Name'), 'width' => '80px');
	     $headers[] = array('data' => t('Description'), 'width' => '150px');
	     $headers[] = array('data' => t('Course'), 'width' => '80px');
	     $headers[] = array('data' => t('Year'), 'width' => '40px');
	     $headers[] = array('data' => t('Flag'), 'width' => '30px');

	     $results = db_query("Select * From ".$tm4db.".recname_".$season." Order BY Year desc, Course");

	     while($object = db_fetch_object($results))
	       $rows[] = array(l($object->RecFile,'records/'.arg(1).'/ages/'.$object->Record),$object->Descript,Course(1,$object->Course),$object->Year,$object->Flag);
	        $output='<br/>'.l('Lastest Records Breakers','records/'.arg(1).'/latest/');
	     return $output.theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
	  }
	break;
     }
}

function perfanal_fina()
{
   switch(arg(1))
     {
      case 'about':
	  {
	     $output.="<div class='tabs'><ul class='tabs primary'>";
	     $output.="<li class='active'>".l('About','fina/about')."</li>";
	     $output.=" <li>".l('Base Times','fina')."</li>";
	     $output.="</ul></div><br><br>";
	     $output.="The FINA Point Scoring allows comparisons of results among different events. The FINA Point<br>";
	     $output.="Scoring assigns point values to swimming performances, more points for world class performances<br>";
	     $output.="typically 1000 or more and fewer points for slower performances.<br>";
	     $output.="Point values are assigned every four years after the Olympic Games. The charts have one set of<br>";
	     $output.="points for Short Course and another for Long Course.<br>";
	     $output.="The scoring is named by the year of the Olympic Games, after which the base times were defined,<br>";
	     $output.="e.g. 'FINA Point Scoring 2004' after the Games of Athen 2004.<br><br>";
	     $output.="<a href='".path_rel()."/docs/fina.pdf'>Read More - Offical Fina Doc</a>";
	     return $output;
	  }
	break;

      case 'base_times':
	  {
	     drupal_set_title("Fina ".arg(2)." ".((arg(3)!='ALL')?Course(1,arg(3))." ":'')."Base Times");

	     drupal_set_breadcrumb(array(l('Base Times','fina')));

	     $headers [] = array('data'=>t('Distance'),'width'=>'60px');
	     $headers [] = array('data'=>t('Stroke'),'width'=>'60px');
	     $headers [] = array('data'=>t('Time'),'width'=>'60px');

	     $results = db_query("Select * From {fina_points} Where Years=".arg(2).((arg(3)!='ALL')?" and Course='".arg(3)."'":'')." and I_R='I' order by Course, I_R,Sex,Stroke,distance");

	     $output.="<table cellpadding='5px' ><tr>";
	     $course = null;
	     $Gender =null;
	     while($object = db_fetch_object($results))
	       {
		  if($course != $object->Course)
		    {
		       $course = $object->Course;
		       if($rows !=null)
			 {
			    $output.=theme('table',$headers,$rows).'</td>';
			    $output.="</tr></table>";
			    $output.="<table cellpadding='5px' ><tr>";
			 }
		       $output.= "<td colspan='2' align='center' class='title'><small>".Course(1,$object->Course)."</small></td></tr><tr>";

		       $rows=null;
		    }

		  if($gender != $object->Sex)
		    {
		       $gender = $object->Sex;
		       if($rows !=null)
			 $output.=theme('table',$headers,$rows).'</td>';
		       $rows=null;
		       $output.= "<td><p class='title' align='center'><small>".Gender($object->Sex)."</small></p>";
		    }

		  $rows[] = array($object->Distance.'m',Stroke($object->Stroke),get_time($object->Score));
	       }

	     $output.=theme('table',$headers,$rows);
	     $output.="</tr></table>";
	     return $output;
	  }
	break;

      default:
	  {
	     drupal_set_title("Fina Base Times");

	     $output.="<div class='tabs'><ul class='tabs primary'>";
	     $output.="<li>".l('About','fina/about')."</li>";
	     $output.=" <li class='active'>".l('Base Times','fina')."</li>";
	     $output.="</ul></div>";

	     $output.="<br><br>Please make a selection<br>";

	     $headers[] = array('data'=>t('Years - Course'), 'width'=>'140px');

	     $results = db_query("Select DISTINCT Years,Course From {fina_points}");

	     while($object = db_fetch_object($results))
	       {
		  $rows[] = array(l($object->Years.' - '.Course(1,$object->Course),'fina/base_times/'.$object->Years.'/'.$object->Course));
	       }
	     $output.=theme('table',$headers,$rows);

	     return $output;
	  }
	break;
     }
}

function Meet_Type_Table($url,$tm4db,$season)
{
   $headers[] = array('data' => t('Abbr'), 'width' => '40px');
   $headers[] = array('data' => t('Description'), 'width' => '150px');

   $results = db_query("Select SQL_CACHE * From ".$tm4db.".code_".$season." Where TYPE=3 order by abbr");

   $rows[] = array(l('ALL',$url.'/ALL'),'');
   while($object = db_fetch_object($results))
     if($object->ABBR !=null)
       $rows[] = array(l($object->ABBR,$url.'/'.$object->ABBR),$object->_DESC);

   return theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
}

function rank_score($tm4db,$season,$Where)  // Points Rankings Function
{
   $headers[] = array('data' => t('#'), 'width' => '20px');
   $headers[] = array('data' => t('Time'), 'width' => '60px');
   $headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
   $headers[] = array('data' => t('M/F'), 'width' => '30px');
   $headers[] = array('data' => t('Age'), 'width' => '30px');
   $headers[] = array('data' => t('Team'), 'width' => '80px');
   $headers[] = array('data' => t('Meet'));

   $query="Select r.MTEVENT,m.MName,a.Athlete, a.Last, a.First, a.Sex, a.age, r.score, t.TCode, t.LSC, r.Age as sage";
   $query.=" FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet))";
   $query.=" WHERE a.Group='A' and ".$Where." order by r.Score";
  // $output.=$query;
   $result = db_query_pages($query,'score','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/'.arg(8).'/'.arg(9));

   while ($object = db_fetch_object($result['result']))
     {
	$link='athlete/'.arg(1).'/top_times/'.$object->Athlete;
	$rows[] = array($object->pos,get_time($object->score),l(t($object->Last.", ".$object->First), $link), $object->Sex, $object->age, $object->TCode."-".$object->LSC,l($object->MName,'meets/'.arg(1).'/event/results/'.$object->MTEVENT));
     }
   if (!$rows)
     $rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6)).' to go back.'), 'colspan' => 7));
   //$output.=$result['query'];
   $output.= theme('table', $headers, $rows);

   $output.=$result['pager'];

   return $output;
}

function rank_fina($tm4db,$season,$Where)  // Points Rankings Function
{
   $sort = (arg(10)==null)?0:arg(10);
   $url = 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/'.arg(8).'/'.arg(9);

   $header[] = array('data' => ($sort==0)?t('Avg'):l(t('Avg'),$url), 'width' => '40px');
   $header[] = array('data' => ($sort==1)?t('Total'):l(t('Total'),$url.'/1'), 'width' => '40px');
   $header[] = array('data' => ($sort==2)?t('Max'):l(t('Max'),$url.'/2'), 'width' => '40px');
   $header[] = array('data' => ($sort==3)?t('Min'):l(t('Min'),$url.'/3'), 'width' => '40px');

   $headers[] = array('data' => t('#'), 'width' => '40px');
   $headers[] = $header[$sort];
   $headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
   $headers[] = array('data' => t('M/F'), 'width' => '30px');
   $headers[] = array('data' => t('Age'), 'width' => '30px');
   $headers[] = array('data' => t('Team'), 'width' => '80px');
   $headers[] = array('data' => t('Events'), 'width' => '40px');
   for($i=0;$i<4;$i++)
     if($i!=$sort)
       {
	  $headers[] = $header[$i];
	  $fields[] = 'f'.$i;
       }

   $query = "SELECT min(r.fina) as f3,max(r.fina) as f2,Round(avg(r.fina)) as f0, Count(*) as events, Sum(r.fina) as f1,";
   $query.= "a.Athlete, a.Last, a.First, a.Sex, a.age, t.TCode, t.LSC FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet)) WHERE a.Group='A' and ".$Where;
   $query.= " group by r.Athlete order by f".$sort." desc ".pages_limit(1);
   //$output.=$query;
	/*
	No pre-ranking needed
	$query = "SELECT *,min(res.fina) as f3,max(res.fina) as f2,Round(avg(res.fina)) as f0, Count(*) as events, Sum(res.fina) as f1 from (select r.stroke,r.distance,Max(r.fina) as fina,a.Athlete, a.Last, a.First, a.Sex, a.age, r.SCORE, t.TCode, t.LSC, r.Age as sage FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet)) WHERE r.I_R='I' and a.Athlete > 0 and r.TRANK>0 and ";
	$query.= $Where." Group by r.Athlete,r.Course,r.stroke,r.distance ) as  res group by res.Athlete order by f".$sort." desc";
	*/
	/*
	$query = "SELECT *,min(res.fina) as fina_min,max(res.fina) as fina_max,Round(avg(res.fina)) as fina_avg, Count(*) as events, Sum(res.fina) as fina2 from (select r.stroke,r.distance,Max(r.fina) as fina,a.Athlete, a.Last, a.First, a.Sex, a.age, r.SCORE, t.TCode, t.LSC, r.Age as sage FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet)) WHERE r.I_R='I' and a.Athlete > 0 and r.TRANK>0 and ";
	$query.= $Where." Group by r.Athlete,r.Course,r.stroke,r.distance ) as  res group by res.Athlete order by fina_avg desc";
	*/

	/*
	$query = "Select *, Max(res.fina) as mins FROM";
	$query.= "(Select Round(1000*Pow(f.Score/r.Score,3)) as fina, m.Meet,m.MName,a.Athlete, a.Last, a.First, a.Sex, a.age, r.SCORE, t.TCode, t.LSC, r.Age as sage";
	$query.= " FROM (((".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left JOIN ".$tm4db.".team_".$season." as t on (r.Team=t.Team) ) left join ".$tm4db.".meet_".$season." as m on (r.Meet=m.Meet))  inner join {fina_points} as f on (r.Course=f.Course and r.I_R=f.I_R and r.Stroke=f.Stroke and r.Distance=f.Distance and a.sex=f.Sex) ";
	$query.= " WHERE r.I_R='I' and a.Athlete > 0 and r.NT=0 and ".$Where; // a.age >=15 and a.age <=16 and r.COURSE='L' and a.Sex='F'and r.Stroke=1 and r.Distance=50 and r.NT=0 and (DATEDIFF(m.Start,'2006-12-24') <=0)";
	$query.= " order by  r.Athlete, r.Score)";
	$query.= " as res GROUP by res.Athlete order by res.fina desc";*/

   //$output.=$query;
   $result = db_query($query);
   //$output.=$query;
   $pos = 0;
   $pos2 = -1;
   $point=NULL;
   //Grouping
   $First = false;
   while ($object = db_fetch_array($result))
     {

	if($point != $object['f'.$sort])
	  {
	     $point = $object['f'.$sort];
	     $pos++;
	  }
	$link='athlete/'.arg(1).'/top_times/'.$object['Athlete'];
	$rows[] = array((($pos ==$pos2)?'-':$pos),$object['f'.$sort],( ($object['Last']==NULL)?'Athlete not found':l(t($object['Last'].", ".$object['First']), $link)), $object['Sex'], $object['age'], $object['TCode'].'-'.$object['LSC'],$object['events'],$object[$fields[0]],$object[$fields[1]],$object[$fields[2]]);
	if($pos != pos2)
	  $pos2 = $pos;
     }

   if (!$rows)
     {
	$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6)).' to go back.'), 'colspan' => 10));
     }
   $output.= theme('table', $headers, $rows);
   return $output;
}

function Indi_Points2($tm4db,$season,$Where)  // Points Rankings Function
{
   $headers[] = array('data' => t('#'), 'width' => '20px');
   $headers[] = array('data' => t('Score'), 'width' => '60px');
   $headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
   $headers[] = array('data' => t('M/F'), 'width' => '30px');
   $headers[] = array('data' => t('Age'), 'width' => '40px');
   $headers[] = array('data' => t('Team'), 'width' => '80px');

   $query = "select a.Athlete, a.Last, a.First, a.Sex, a.age, round((sum(r.POINTS)/10),1) as Sum_Points, t.TCode, t.LSC from ";
   $query.=" (".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
   $query.=" Where a.Group='A' and r.points>0 and".$Where." and r.I_R='I' GROUP BY  r.ATHLETE having Sum(r.POINTS)>0 order by Sum_Points DESC,a.last limit 600";
   //$output.=$query;
   $result = db_query_pages($query,'Sum_Points','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7));
   //$result = db_query($query);
   //$output.=$query;
   $pos=$result['pos'];
   while ($object = db_fetch_object($result['result']))//db_fetch_object($result))
     {
	$link='athlete/'.arg(1).'/top_times/'.$object->Athlete;
	$rows[] = array($pos++,$object->Sum_Points,( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->age, $object->TCode."-".$object->LSC);
     }
   if (!$rows)
     {
	$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4)).' to go back.'), 'colspan' => 6));
     }
   $output.= theme('table', $headers, $rows);
   $output.=$result['pager'];
   return $output;
}

function team_points($tm4db,$season,$Where)
{
   $headers[] = array('data' => t('#'), 'width' => '20px');
   $headers[] = array('data' => t('Score'), 'width' => '60px');
   $headers[] = array('data' => t('Team Name'), 'width' => '250px');
   $headers[] = array('data' => t('Code'), 'width' => '80px');
   $headers[] = array('data' => t('Athletes'), 'width' => '80px');

   $query="SELECT Round(SUM(r.POINTS)/10,1) as Sum_Points,t.TName,t.TCode, t.LSC , Count(DISTINCT If(r.I_R='I',r.Athlete,0)) AS Sum_Athletes";
   $query.=" FROM (".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
   $query.=" Where a.Group='A' and r.points > 0 and ".$Where." Group by r.Team HAVING SUM(r.POINTS)>0 Order by Sum_Points Desc ".pages_limit(1);

   $result = db_query($query);

   $pos = 0;
   $pos2 = -1;
   $point=NULL;
   while ($object = db_fetch_object($result))
     {
	if($point != $object->Sum_Points)
	  {
	     $point = $object->Sum_Points;
	     $pos++;
	  }
	$rows[] = array((($pos ==$pos2)?'-':$pos),$object->Sum_Points,( ($object->TName==NULL)?'Team not found':$object->TName), $object->TCode."-".$object->LSC,$object->Sum_Athletes);
	if($pos != pos2)
	  $pos2 = $pos;
     }
   if (!$rows)
     {
	$rows[] = array(array('data' => t('There are no athletes results found matching your criteria, click '.l(t('here'), 'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4)).' to go back.'), 'colspan' => 5));
     }
   return theme('table', $headers, $rows);
}

function perfanal_ranking()
{
   $edit = $_POST["edit"];
   $season = get_seasons();
      
   $tm4db = variable_get('perfanal_database', 'perfanal');
   $min_display = variable_get('perfanal_min_display', '20');
   $lsc = variable_get('perfanal_lsc', '');
   $cntry = variable_get('perfanal_cntry', '');
   $url_pref = (($cntry=='')?'All':$cntry);

   $pref_head='';
   if($cntry!='')
     $pref_head.=$cntry.' ';
   if($lsc!='')
   {
   $pref_head.= (($pref_head !='')?' - ':'');
     $pref_head.=$lsc.' ';
   }
   if(arg(3)!=$cntry & arg(3)!=null & arg(3)!='All' & arg(3)!=$lsc)
   {
	   $pref_head.= (($pref_head !='')?' - ':'');
     $pref_head.=arg(3).' ';
   }
   
   $update = variable_get('perfanal_ranking_update', 'W');
   $period = variable_get('perfanal_ranking_period', '2');
   
 

   $type = Array('indi_points'=>'Individual Points','team_points'=>'Team Points','time'=>'Time','fina'=>'Fina');

   setseasons_breadcrumb(null);

   if(arg(2)=='updating')
     {
	      drupal_set_title($season.' '.$pref_head." Updating Rankings in processing");
	     $output='<br/>'.$season.' '.$pref_head." Updating Rankings in processing stage: ".variable_get('perfanal_'.$season.'_ranking_stage', '1');
	     $output.='<br/>This will only take a couple of seconds so please be patient.';
	     return $output;
     }
   else
   {
	  $timeout = variable_get('perfanal_ranking_timeout',10)+1;
	  if(variable_get('perfanal_'.$season.'_ranking_updating',false) &  variable_set('perfanal_'.$season.'_ranking_start_time',time())> (date('Y-m-d',time())-($timeout*60)))
		drupal_goto('ranking/'.$season.'/updating');
	   
	     $last_ranking = variable_get('perfanal_'.$season.'_ranking_last_update', '');


	
		   perfanal_automated_rankings_Update($season);
		    //drupal_goto('ranking/'.$season.'/updating');
	   
	   
     if(arg(2) ==null) //Rankings type
       {

	  drupal_set_title($pref_head." Rankings Categories");
	  $output.='<br>'.l('Individual Points','ranking/'.arg(1).'/indi_points').'<br><br>';
	  $output.=l('Team Points','ranking/'.arg(1).'/team_points').'<br><br>';
	  $output.=l('Times','ranking/'.arg(1).'/time').'<br><br>';
	  $output.=l('Fina','ranking/'.arg(1).'/fina').'<br>Allows performance comparison across strokes<br>and sprinters against long distance athletes.';
	  return $output;

       }
   else if(arg(2)=='info')
     {
	drupal_set_title("Rankings Information");

	$update = variable_get('perfanal_ranking_update', 'W');
	$period = variable_get('perfanal_ranking_period', '2');
	$rank_days_before = variable_get('perfanal_ranking_days_before','2');
	   $rank_from_option = variable_get('perfanal_rank_from','y');
	     
        $Sd = variable_get('perfanal_ranking_dd', '01');
        $Sm = variable_get('perfanal_ranking_mm', '01');
        $from_date = $season.'-'.$Sm.'-'.$Sd;
	
	$output.="<br/>The current rankings as of ".$last_ranking."<br/><br/>";
	if($rank_from_option=='y')
	$output.='Results from '.$from_date.'.<br/><br/>';
	$type = variable_get('perfanal_'.arg(1).'_ranking_type', '');
	if($type=='archive')
	  {
	     $output.="These are Archived Ranks and will not be updated.<br/><br/>";
	  }
	else
	  {
	     If($update=='M')
	       $output.="They are updated on a Monthly basis.<br/><br/>";
	     else
	       $output.="They are updated every ".$period." Weeks.<br/><br/>";
	  }

	$output.="Athlete's age's are determined as at the current rankings date. (".$last_ranking.")<br/>";
	$output.="Age group filters look at the athlete's age as of the current rankings date.<br/><br/>";
	$output.="Meet Results that are consider for rankings must have ended ".$rank_days_before." days prior to the rankings date. (".$last_ranking.")<br/>";
	$output.="To view list of meets including in this rankings set click the Meets link on rankings page.<br/>";

	return t($output);

     }
   else
     if(arg(2)=='teams')
       {
	  drupal_set_title((($cntry!='')?$cntry:'').((arg(4)=='')?'':(($cntry!='')?' - ':'').arg(4))." Teams Information");
	  $output.="<br><div class='tabs'><ul class='tabs primary'>";
	  $output.="<li ".((arg(3)=='include')?"class='active'":'').">".l('Include','ranking/'.arg(1).'/teams/include/'.arg(4))."</li>";
	  $output.="<li ".((arg(3)!='include')?"class='active'":'').">".l('Exclude','ranking/'.arg(1).'/teams/exclude/'.arg(4))."</li>";
	  $output.="</ul></div>";
	  if(arg(3)=='include')
	    {
	       $query = "Select distinct tname,tcode,lsc,tcntry From ".$tm4db.".team_".$season." where 1=1 ".(($cntry=='')?'':"and tcntry ='".$cntry."'").' '.((arg(4)=='')?'':"and lsc ='".arg(4)."'").' order by tcntry,lsc,tcode';
	       $results = db_query($query);

	    }
	  else if (arg(3) == 'exclude')
	    {
	       $query = "Select distinct tname,tcode,lsc,tcntry From ".$tm4db.".team_".$season." where not( 1=1  ".(($cntry=='')?'':"and tcntry ='".$cntry."'").' '.((arg(4)=='')?'':"and lsc ='".arg(4)."'").') order by tcntry,lsc,tcode';
	       $results = db_query($query);
	    }

	  $headers[] = array('data' => t('Name'), 'width' => '200px');
	  $headers[] = array('data' => t('Code'), 'width' => '60px');
	  $headers[] = array('data' => t('LSC'), 'width' => '40px');
	  $headers[] = array('data' => t('Country'), 'width' => '40px');

	  while($object = db_fetch_object($results))
	    $rows[] = array($object->tname,$object->tcode,$object->lsc,$object->tcntry);

	  $output.= theme('table', $headers, $rows);

	  return $output;

       }

   $breadcrumb[] = l('Categories','ranking/'.arg(1));
   $meettype=variable_get('perfanal_type', '');
   if(arg(3)==null) //Country and LSC Filter
     {
	    
	    /*
	  if($cntry!='')
	  drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.$cntry);
	*/
	  if($lsc !='')
	  drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.$lsc);
	

	drupal_set_title($pref_head.$type[arg(2)].' Rankings - Graphical location');
	setseasons_breadcrumb($breadcrumb);

	$headers[] = array('data' => t('LSC'), 'width' => '80px');
	$headers[] = array('data' => t('Description'), 'width' => '200px');

	$results = db_query("Select SQL_CACHE distinct t.lsc,c._desc From ".$tm4db.".team_".$season." as t left join ".$tm4db.".code_".$season." as c on (t.lsc = c.abbr and c.type=3) where t.lsc !='' ".(($cntry=='')?'':"and t.tcntry ='".$cntry."'" ).(($meettype=='LSC')?' and t.lsc=c.abbr':'').' order by LSC');
	  if($lsc=='' & $cntry!='')
	    $rows[] = array(l($url_pref,'ranking/'.arg(1).'/'.arg(2).'/'.$url_pref),variable_get('perfanal_cntry_desc',''));

	while($object = db_fetch_object($results))
	  if($cntry!=$object->lsc)
	    $rows[] = array(l($object->lsc,'ranking/'.arg(1).'/'.arg(2).'/'.$object->lsc),$object->_desc);

	$output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
	return  $output;

     }

   if(($lsc =='' & $cntry=='') || ($cntry!='' & $lsc ==''))
     $breadcrumb[] = l('Graphical location','ranking/'.arg(1).'/'.arg(2));

   if(arg(4)==null) //Meet type
     {
	if($meettype!='' & $meettype!='LSC')
	  drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.$meettype);
	if($meettype=='LSC')
	  {
		  if($cntry=='' || arg(3) != $cntry)
		  {
		     $results = db_query("Select SQL_CACHE * from ".$tm4db.".code_".$season." Where abbr='%s' and type=3",arg(3));
		     $object = db_fetch_object($results);
		     if($object!=null)
		       {
			    drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(3));
		       }
		     else
		       {
			  drupal_set_message("No Meet Type's found matching ".arg(3));
			  drupal_goto('ranking/'.arg(1).'/'.arg(2));
		       }
		  }
		  else
		  drupal_goto('ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/ALL');
		  

	  }
	drupal_set_title($pref_head.$type[arg(2)].' Rankings - Meet Type');
	setseasons_breadcrumb($breadcrumb);
	return  Meet_Type_Table('ranking/'.arg(1).'/'.arg(2).'/'.arg(3),$tm4db,$season);
     }

   if($meettype=='')
     $breadcrumb[] = l('Meet Type','ranking/'.arg(1).'/'.arg(2).'/'.arg(3));

   if(arg(4)!='ALL')
     {
	$results = db_query("Select SQL_CACHE * from ".$tm4db.".code_".$season." Where abbr='%s' and type=3",arg(4));
	$object = db_fetch_object($results);
	$tindex = $object->tindex;
	$heading = (($object->_DESC=='')?$object->ABBR.' ':$object->_DESC).' Meets Only, ';
     }
   else
     $heading = 'All Meets, ';

   if(arg(5) ==null) // Course
     {
	drupal_set_title($pref_head.$type[arg(2)].' Rankings - Course'."<br/><small>".$heading.'</small>');
	setseasons_breadcrumb($breadcrumb);
	$output="<br>Please Select a course.<br><br>";
	if(arg(2) =='indi_points' || arg(2) =='team_points' || arg(2) =='fina')
	  $output.=l('All Courses','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/ALL').'<br><br>';
	$output.=l('Short Course 25m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/S').'<br><br>';
	$output.=l('Long Course 50m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/L').'<br><br>';
	//$output.=l('Yards','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/Y').'<br><br>';
	return $output;
     }
   $breadcrumb[] = l('Course','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4));

   if(arg(6) ==null || arg(7) ==null)//Age group and gender
     {
	$age_groups = Array(99,8,909,910,1010,1011,1111,1112,1212,1213,1313,1314,1414,1415,1515,1516,1616,1617,1718,1818,1899);
	drupal_set_title($pref_head.$type[arg(2)].' Rankings - Age Group & Gender'."<br/><small>".$heading.' '.Course(1,arg(5)).' </small>');
	setseasons_breadcrumb($breadcrumb);
	$headers[] = array('data' => t('Female'), 'width' => '100px');
	$headers[] = array('data' => t('Male'), 'width' => '100px');
	$headers[] = array('data' => t('Mixed'), 'width' => '100px');
	foreach($age_groups as $gp)
	  {
	     $rows[] = array(l(Age($gp),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/female/'.$gp),l(Age($gp),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/male/'.$gp),l(Age($gp),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/mixed/'.$gp));
	  }

	$output.= theme_table($headers, $rows,null,null);
	return $output;

     }
   else
     {

	// Set up where conditioning
	if(arg(2)=='indi_points' || arg(2)=='team_points' || (arg(8)!=null & arg(9) !=null))
	  {
	     $Where = "";
	     if(arg(7)!=99)
	     if(arg(2)=='team_points')
	       $Where.=" r.AGE >=".floor(arg(7)/100)." and r.AGE <=".(arg(7)%100)." ";
	     else
	       $Where.=" a.age >=".floor(arg(7)/100)." and a.age <=".(arg(7)%100)." ";
	       else $Where.=" (1=1) ";

	     if(arg(2)=='team_points' || arg(2)=='indi_points')
	       {
		  if(arg(4) != 'ALL')
		    {
		       $Where.= " and ( r.RType = ".$tindex." Or r.RType = ".($tindex+1).")";
		    }
		  else
		    $Where.= " and r.RAll != 0";
	       }
	     else
	       {
		  if(arg(4) != 'ALL')
		    {
		       $Where.= " and r.RType = ".$tindex." ";
		    }
		  else
		    $Where.= " and r.RAll=1";
	       }
	     if(arg(5) != 'ALL')
	       $Where.= " and r.COURSE='".arg(5)."' ";
	     switch(arg(6))
	       {
		case 'female': $Where.= " and a.Sex='F'";
		  break;
		case 'male': $Where.= " and a.Sex='M'";
		  break;
	       }
	     if($cntry != arg(3) & arg(3) !='All')
	       $Where.= " and t.LSC='".arg(3)."' ";
	  }
	//Display Rankings Title
	$output.="<p style='padding:5px;' align='right'>".((arg(2)=='fina')?l('Base Times','fina/base_times/2004/'.arg(5)).' | ':'').'Included '.l('Meets','meets/'.arg(1).'/'.arg(4).'/'.$last_ranking)." & ".l('Teams','ranking/'.arg(1).'/teams/include/'.(($cntry != arg(3) & arg(3)!='All')?arg(3):''))." | ".l('Detailed Information','ranking/'.arg(1).'/info')."</p>";
	$breadcrumb[]=l('Age Group & Gender','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5));
	setseasons_breadcrumb($breadcrumb);
	drupal_set_title($pref_head.' '.$type[arg(2)].' Rankings as of '.$last_ranking.'<br><small>'.$heading.' '.Gender(arg(6)).' '.Age(arg(7)).' '.Course(1,arg(5)).'</small> ');

	if(arg(2)=='indi_points') //Dsiplay Individual Points Rankings
	  {
	     return $output.Indi_Points2($tm4db,$season,$Where);
	  }
	else if(arg(2)=='team_points') // Display team Points Rankings
	  {
	     return $output.team_points($tm4db,$season,$Where);

	  }
	else if(arg(8)==null || arg(9) ==null) // Stroke Distance selection
	  {
	     if(arg(2)=='time')
	       {
		  if(arg(5)=='S')
		    $age_groups[] = Array(25,25,25,25,null);
		  $age_groups[] = Array(50,50,50,50,null);
		  $age_groups[] = Array(100,100,100,100,100);
		  $age_groups[] = Array(200,200,200,200,200);
		  $age_groups[] = Array(400,null,null,null,400);
		  $age_groups[] = Array(800);
		  $age_groups[] = Array(1500);

		  drupal_set_title($pref_head.' '.$type[arg(2)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(6)).' '.Age(arg(7)).' '.Course(1,arg(5)).'</small>');
		  $headers[] = array('data' => t(Stroke(1)), 'width' => '80px');
		  $headers[] = array('data' => t(Stroke(2)), 'width' => '80px');
		  $headers[] = array('data' => t(Stroke(3)), 'width' => '80px');
		  $headers[] = array('data' => t(Stroke(4)), 'width' => '80px');
		  $headers[] = array('data' => t(Stroke(5)), 'width' => '80px');

		  foreach($age_groups as $gp)
		    {
		       $rows[] = array((($gp[0]!=null)?l($gp[0].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/1/'.$gp[0]):'-'),
				       (($gp[1]!=null)?l($gp[1].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/2/'.$gp[1]):'-'),
				       (($gp[2]!=null)?l($gp[2].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/3/'.$gp[2]):'-'),
				       (($gp[3]!=null)?l($gp[3].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/4/'.$gp[3]):'-'),
				       (($gp[4]!=null)?l($gp[4].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/5/'.$gp[4]):'-'));
		    }

		  $output.= theme('table', $headers, $rows);
		  return $output;
	       }
	     else
	       if(arg(2)=='fina')
		 {

		    $age_groups[] = Array(50,1,1,1,1,null);
		    $age_groups[] = Array(100,1,1,1,1,1);
		    $age_groups[] = Array(200,1,1,1,1,1);
		    $age_groups[] = Array(400,1,null,null,null,1);
		    $age_groups[] = Array(800,1);
		    $age_groups[] = Array(1500,1);

		    drupal_set_title($pref_head.' '.$type[arg(2)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(6)).' '.Age(arg(7)).' '.Course(1,arg(5)).'</small>');
		    $headers[] = array('data' => t('Distance'), 'width' => '70px');
		    $headers[] = array('data' => l(Stroke(1),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/1/All'), 'width' => '60px');
		    $headers[] = array('data' => l(Stroke(2),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/2/All'), 'width' => '60px');
		    $headers[] = array('data' => l(Stroke(3),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/3/All'), 'width' => '60px');
		    $headers[] = array('data' => l(Stroke(4),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/4/All'), 'width' => '60px');
		    $headers[] = array('data' => l(Stroke(5),'ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/5/All'), 'width' => '60px');

		    foreach($age_groups as $gp)
		      {
			 $rows[] = array((($gp[0]!=null)?l($gp[0].'m','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/All/'.$gp[0]):'-'),
					 (($gp[1]==1)?theme_image(path().'/images/tick.gif','*'):'-'),
					 (($gp[2]==1)?theme_image(path().'/images/tick.gif','*'):'-'),
					 (($gp[3]==1)?theme_image(path().'/images/tick.gif','*'):'-'),
					 (($gp[4]==1)?theme_image(path().'/images/tick.gif','*'):'-'),
					 (($gp[5]==1)?theme_image(path().'/images/tick.gif','*'):'-'));
		      }

		    $output.=l('Overall Fina Points','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7).'/All/All').' - Regardless of Stroke or Distance';
		    $output.='<br/><br/>';

		    $output.= theme('table', $headers, $rows);
		    return $output;
		 }
	  }
	else
	  {
	     $breadcrumb[] = l('Distance & Stroke','ranking/'.arg(1).'/'.arg(2).'/'.arg(3).'/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.arg(7));
	     setseasons_breadcrumb($breadcrumb);

	     if(arg(2)=='time') // Display Times Rankings
	       {
		  drupal_set_title($pref_head.' '.$type[arg(2)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(6)).' '.Age(arg(7)).' '.arg(9).'m '.Stroke(arg(8)).' '.Course(1,arg(5)).'</small>');
		  $Where.= " and r.Stroke=".arg(8)." ";
		  $Where.= " and r.Distance=".arg(9)." ";
		  return $output.rank_score($tm4db,$season,$Where);

	       }
	     else if(arg(2)=='fina') // Display Fina Rankings
	       {
		  drupal_set_title($pref_head.' '.$type[arg(2)].' Rankings'." as of ".$last_ranking."<br/><small>".$heading.' '.Gender(arg(6)).' '.Age(arg(7)).' '.((arg(8)=='All' & arg(9)=='All')?'Overall':(((arg(9)=='All')?'':arg(9).'m ').((arg(8)=='All')?'':Stroke(arg(8))))).' '.Course(0,arg(5)).'</small>');
		  if(arg(8)!='All')
		    $Where.= " and r.Stroke=".arg(8)." ";
		  if(arg(9)!='All')
		    $Where.= " and r.Distance=".arg(9)." ";
		  return $output.rank_fina($tm4db,$season,$Where);
	       }

	  }
   }
   }

}

function Indi_Points($tm4db,$season,$Where)  // Points Rankings Function
{
   $headers[] = array('data' => t('#'), 'width' => '20px');
   $headers[] = array('data' => t('Score'), 'width' => '60px');
   $headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
   $headers[] = array('data' => t('M/F'), 'width' => '30px');
   $headers[] = array('data' => t('Age'), 'width' => '40px');
   $headers[] = array('data' => t('Team'), 'width' => '80px');

	/*$query = "select e.Lo_Hi,  a.Athlete, a.Last, a.First, a.Sex,r.age, (sum(r.POINTS)/10) as Sum_Points, t.TCode, t.LSC from ";
	$query.=" ((".$tm4db.".mtevent_".$season." as e left join ".$tm4db.".result_".$season." as r on (e.MtEvent=r.MTEVENT)) left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
	$query.=" ".$Where." and r.I_R='I' and a.Athlete>0 GROUP BY e.Lo_Hi, r.ATHLETE having Sum(r.POINTS)>0 order by e.Lo_Hi, Sum_Points DESC,a.last";
	*/
   $query = "select a.Athlete, a.Last, a.First, a.Sex,r.age, (sum(r.POINTS)/10) as Sum_Points, t.TCode, t.LSC from ";
   $query.=" ( ".$tm4db.".result_".$season." as r left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
   $query.=" ".$Where." and r.I_R='I' and a.Athlete>0 GROUP BY r.ATHLETE having Sum(r.POINTS)>0 order by Sum_Points DESC,a.last";

   $result = db_query($query);
   //$output.=$query;
   $output.= '<table><tr><td>';

   $pos = 0;
   $pos2 = -1;
   $point=NULL;
   //Grouping
   $Age=NULL;
   $First = false;
   while ($object = db_fetch_object($result))
     {
	if($Age != $object->Lo_Hi)
	  {
	     $Age = $object->Lo_Hi;
	     $pos = 0;
	     //Heading for Grouping
	     if($rows==NULL && $First)
	       $rows[] = array(array('data' => t('There are no results for this Age Group'), 'colspan' => 6));
	     $First=true;

	     if($rows !=NULL)
	       $output.= theme('table', $headers, $rows).'<br>';
	     $output.= "<br><p class='title' align=\'center\'><b>".Age($object->Lo_Hi).'</b></p><br>';
	     $rows = NULL;
	  }

	if($point != $object->Sum_Points)
	  {
	     $point = $object->Sum_Points;
	     $pos++;
	  }
	$link='athlete/'.arg(1).'/top_times/'.$object->Athlete;
	$rows[] = array((($pos ==$pos2)?'-':$pos),Round($object->Sum_Points,1),( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->age, $object->TCode."-".$object->LSC);
	if($pos != pos2)
	  $pos2 = $pos;
     }
   if (!$rows)
     {
	$rows[] = array(array('data' => t('There are no results for this Age Group, click '.l(t('here'), 'meets/'.arg(1).'/points/'.arg(4)).' to go back.'), 'colspan' => 6));
     }
   $output.= theme('table', $headers, $rows);
   $output.= '</td></tr></table>';
   return $output;
}

function perfanal_meets()
{
   $edit = $_POST["edit"];
   $season = get_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');
   $min_display = variable_get('perfanal_min_display', '20');

   $output='';
   switch(arg(2))
     {
	     
	    
	     case 'meet_results':
		    {

			$query = "select SQL_CACHE m.QTSS,m.QTS,m.QTLS,m.QTL, m.MName, m.* FROM ".$tm4db.".meet_".$season." as m where m.Meet=%d";
			$result = db_query($query,arg(3));
			$object = db_fetch_object($result);
			drupal_set_title($object->MName.' Meet Results');
			setseasons_breadcrumb(array(l('Meets','meets/'.arg(1))));
			
			
			
			$type = ($object->Type==null)?'ALL':$object->Type;
			$output.="<table><tr><td><table  width='435px' cellSpacing='5' cellPadding='5' border='0'>";
			$output.="<tr><td width='110'>Starts:</td><td width='50' align='right'>".get_date($object->Start)."</td><td width='115'>Ends:</td><td align='right'>".get_date($object->End)."</td></tr>";
			$output.="<tr><td>Course: </td><td align='right'>".$object->Course."</td><td>Meet Type:</td><td align='right'>".l($type,'meets/'.arg(1).'/'.$type)."</td></tr>";
			$output.="<tr><td>Altitude in Feet:</td><td align='right'>".hasvalue('',$object->Altitude>0)."</td><td>Min Open Age:</td><td align='right'>".hasvalue('',$object->MinAge)."</td></tr>";
			$output.="<tr><td vAlign='top' colspan='4'>Location: ".$object->Location."</td></tr>";
			$output.="</table>";
			$output.="<hr align='left' width='435'>";
			$output.="</tr></table>";
			/*
			$evnt_sql='';
			if(($QTL=$object->QTL)>0)
			$evnt_sql=', Fast_L';
			if(($QTLS=$object->QTLS)>0)
			$evnt_sql=', Slow_L';
			if(($QTS=$object->QTS)>0)
			$evnt_sql=', FastCut';
			if(($QTSS=$object->QTSS)>0)
			$evnt_sql=', Slow_Cut';*/
			
		       $result = db_query("Select Session, MtEvent, Lo_Hi ,concat(MtEv,' ',MtEvX) as MtEv, Sex, Distance, Stroke, I_R, Course,Division FROM ".$tm4db.".mtevent_".$season." as e WHERE e.MtEv>0 and  Meet=%d Group by MtEv order by Session, MtEv",arg(3));

		       while ($object = db_fetch_object($result))
			 {
			    $link = 'meets/'.arg(1).'/event_info/'.arg(3).'/'.$object->MtEv;
			    $temp[] = $object->Session;

			    $temp[] = ($object->Events == 1)?$object->MtEv:l($object->MtEv, $link);
			    $temp[] =Gender($object->Sex);
			    $temp[] = Age($object->Lo_Hi);
			    $temp[] =  $object->Distance."m";
			    $temp[] = Stroke($object->Stroke);
			    $temp[] =  IR($object->I_R);
			    $temp[] = ($object->Events==1)?$object->Fee:'';
			    $temp[] = Course(0,$object->Course);
			   /*
				 if($QTL>0)
				   $temp[]=get_time($object->Fast_L);
				 if($QTLS>0)
				   $temp[]=get_time($object->Slow_L);
				 if($QTS>0)
				   $temp[]=get_time($object->FastCut);
				 if($QTSS>0)
				   $temp[]=get_time($object->SlowCut);
			   */
			    $rows[] = $temp;
			    $temp=null;
			 }
		       $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
		    }
		  break;
	    
      case 'team_points':  //Team points Rankings
	  {
	     if(arg(3) !='female' & arg(3) !='male' & arg(3) !='mixed')
	       {
		  $query = "select SQL_CACHE m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=%d and e.Meet=m.Meet";
		  $result = db_query($query,arg(3));
		  $object = db_fetch_object($result);
		  drupal_set_title($object->MName.' Meet');//."&nbsp;&nbsp;&nbsp;Points Rankings<br><br>");

		  $output.="<div class='tabs'><ul class='tabs primary'>";
		  $output.="<li>".l('Info','meets/'.arg(1).'/info/'.arg(3))."</li>";
		  $output.=" <li>".l('Events','meets/'.arg(1).'/events/'.arg(3))."</li>";
		  $output.="<li>".l('Individual Points','meets/'.arg(1).'/points/'.arg(3))."</li>";
		  $output.="<li  class='active'>".l('Team Points','meets/'.arg(1).'/team_points/'.arg(3))."</li>";
		  $output.="</ul></div>";

		  $output.="<br>".l('Mixed','meets/'.arg(1).'/team_points/mixed/'.arg(3));
		  $output.="<br><br>".l('Female','meets/'.arg(1).'/team_points/female/'.arg(3));
		  $output.="<br><br>".l('Male','meets/'.arg(1).'/team_points/male/'.arg(3));
	       }
	     else
	       {
		  $query = "select SQL_CACHE m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=%d and e.Meet=m.Meet";
		  $result = db_query($query,arg(4));
		  $object = db_fetch_object($result);
		  drupal_set_title($object->MName.' Meet');
		  setseasons_breadcrumb(array(l('Meets','meets/'.arg(1))));
		  switch(arg(3))
		    {
		     case 'female': $Gen= "Female";
		       break;
		     case 'male': $Gen="Male";
		       break;
		     case 'mixed': $Gen="Mixed";
		       break;
		    }
		  $output.= "<br><p class='title' align=\'center\'>".$Gen." Team Rankings</p><br>";

		  $Where='';
		  switch(arg(3))
		    {
		     case 'female': $Where.= " and a.Sex='F'";
		       break;
		     case 'male': $Where.= " and a.Sex='M'";
		       break;
		    }

				/*Display team rankings*/

		  $headers[] = array('data' => t('#'), 'width' => '20px');
		  $headers[] = array('data' => t('Score'), 'width' => '60px');
		  $headers[] = array('data' => t('Team Name'), 'width' => '250px');
		  $headers[] = array('data' => t('Code'), 'width' => '80px');
		  $headers[] = array('data' => t('Athletes'), 'width' => '80px');

		  $query="SELECT SUM(r.POINTS)/10 as Sum_Points,t.TName,t.TCode, t.LSC , Count(DISTINCT If(r.I_R='I',r.Athlete,0)) AS Sum_Athletes";
		  $query.=" FROM (".$tm4db.".result_".$season." as r  left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE=a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)";
		  $query.=" Where r.Meet=%d".$Where." Group by r.Team HAVING SUM(r.POINTS)>0 Order by Sum_Points Desc";

		  $result = db_query($query,arg(4));

		  $pos = 0;
		  $pos2 = -1;
		  $point=NULL;
		  while ($object = db_fetch_object($result))
		    {
		       if($point != $object->Sum_Points)
			 {
			    $point = $object->Sum_Points;
			    $pos++;
			 }
		       $rows[] = array((($pos ==$pos2)?'-':$pos),Round($object->Sum_Points,1),( ($object->TName==NULL)?'Team not found':$object->TName), $object->TCode."-".$object->LSC,$object->Sum_Athletes);
		       if($pos != pos2)
			 $pos2 = $pos;
		    }
		  if (!$rows)
		    {
		       $rows[] = array(array('data' => t('There are no results for this Gender, click '.l(t('here'), 'meets/'.arg(1).'/team_points/'.arg(4)).' to go back.'), 'colspan' => 5));
		    }
		  $output.= theme('table', $headers, $rows);
	       }
	  }
	break;

      case 'points':  //Individual Points Rankings
	  {
	     if(arg(3) !='female' & arg(3) !='male' & arg(3) !='mixed')
	       {
		  $query = "select SQL_CACHE m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=%d and e.Meet=m.Meet";
		  $result = db_query($query,arg(3));
		  $object = db_fetch_object($result);
		  drupal_set_title($object->MName.' Meet');//."&nbsp;&nbsp;&nbsp;Points Rankings<br><br>");
		  setseasons_breadcrumb(array(l('Meets','meets/'.arg(1))));
		  $output.="<div class='tabs'><ul class='tabs primary'>";
		  $output.="<li>".l('Info','meets/'.arg(1).'/info/'.arg(3))."</li>";
		  $output.="<li>".l('Events','meets/'.arg(1).'/events/'.arg(3))."</li>";
		  $output.="<li  class='active'>".l('Individual Points','meets/'.arg(1).'/points/'.arg(3))."</li>";
		  $output.="<li>".l('Team Points','meets/'.arg(1).'/team_points/'.arg(3))."</li>";
		  $output.="</ul></div>";

		  //$output.= "<br><p class='title' align=\'center\'>Points Rankings</p><br>";

		  $headers [] = array('data'=>t('Female'),'width'=>'100px');
		  $headers [] = array('data'=>t('Male'),'width'=>'100px');
		  $headers [] = array('data'=>t('Mixed'),'width'=>'100px');

		  $query = "SELECt Distinct Lo_Hi from ".$tm4db.".mtevent_".$season." Where I_R='I' and  Meet=%d  union select '99' as Lo_Hi order by Lo_Hi desc";
		  $result = db_query($query,arg(3));
		  //$rows[] = array(l('All Groups','meets/'.arg(1).'/points/female/'.arg(3)),l('All Groups','meets/'.arg(1).'/points/male/'.arg(3)),l('All Groups','meets/'.arg(1).'/points/mixed/'.arg(3)));
		  while ($object = db_fetch_object($result))
		    {
		       $rows[] = array(l(Age($object->Lo_Hi),'meets/'.arg(1).'/points/female/'.arg(3).'/'.$object->Lo_Hi),l(Age($object->Lo_Hi),'meets/'.arg(1).'/points/male/'.arg(3).'/'.$object->Lo_Hi),l(Age($object->Lo_Hi),'meets/'.arg(1).'/points/mixed/'.arg(3).'/'.$object->Lo_Hi));
		    }
		  $output.= theme('table', $headers, $rows);
	       }
	     else
	       {
		  $query = "select m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m WHERE e.Meet=".arg(4)." and e.Meet=m.Meet";
		  $result = db_query($query);
		  $object = db_fetch_object($result);
		  drupal_set_title($object->MName.' Meet');
		  switch(arg(3))
		    {
		     case 'female': $Gen= "Female";
		       break;
		     case 'male': $Gen="Male";
		       break;
		     case 'mixed': $Gen="Mixed";
		       break;
		    }
		  $output.= "<br><p class='title' align=\'center\'>".$Gen." Points Rankings</p><br>";

		  $Where = ' ';
		  switch(arg(3))
		    {
		     case 'female': $Where.= " and a.Sex='F'";
		       break;
		     case 'male': $Where.= " and a.Sex='M'";
		       break;
		    }
		  if(arg(5) !=NULL)
		    {
		       $Where.= " and r.Age >=".floor(arg(5)/100)." and r.Age <=".(arg(5)%100);
		    }

		  //Call render functon

		  $output.=Indi_Points($tm4db,$season,"WHERE r.Meet=".arg(4).' '.$Where);
		  return $output;
	       }
	  }
	break;

      case 'info':
	  {
	     $query = "select SQL_CACHE IF(e.Meet Is Null,1,0) as results, m.* FROM ".$tm4db.".meet_".$season." as m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Meet=%d";
	     $result = db_query($query,arg(3));
	     $object = db_fetch_object($result);
	     $display_link = $object->results;

	     drupal_set_title($object->MName.' Meet');
	     setseasons_breadcrumb(array(l('Meets','meets/'.arg(1))));

	     $output.="<div class='tabs'><ul class='tabs primary'>";
	     $output.="<li class='active'>".l('Info','meets/'.arg(1).'/info/'.arg(3))."</li>";

	     If($display_link==0)
	       {
		  $output.=" <li>".l('Events','meets/'.arg(1).'/events/'.arg(3))."</li>";
		  $output.="<li>".l('Individual Points','meets/'.arg(1).'/points/'.arg(3))."</li>";
		  $output.="<li>".l('Team Points','meets/'.arg(1).'/team_points/'.arg(3))."</li>";
	       }
	     else
	       $output.=" <li>".l('Events','meets/'.arg(1).'/events_info/'.arg(3))."</li>";
	     $output.="</ul></div>";

	     $type = ($object->Type==null)?'ALL':$object->Type;
	     $output.="<br><table><tr><td><table  width='435px' cellSpacing='5' cellPadding='5' border='0'>";
	     $output.="<tr><td width='110'>Starts:</td><td width='50' align='right'>".get_date($object->Start)."</td><td width='115'>Age-up:</td><td width='60' align='right'>".get_date($object->AgeUp)."</td></tr>";
	     $output.="<tr><td>Ends:</td><td align='right'>".get_date($object->End)."</td><td>Times Since:</td><td align='right'>".get_date($object->Since)."</td></tr>";
	     $output.="<tr><td>Course: </td><td align='right'>".$object->Course."</td><td>Meet Type:</td><td align='right'>".l($type,'meets/'.arg(1).'/'.$type)."</td></tr>";
	     $output.="<tr><td style='cursor:hand' title='Entry Times must come from Meets of the same Meet Type as this one.'>E.T Same Type:</td><td align='right'>".yesno($object->RestrictBest)."</td><td>Min Open Age:</td><td align='right'>".hasvalue('',$object->MinAge)."</td></tr>";
	     $output.="<tr><td>Altitude in Feet:</td><td align='right'>".hasvalue('',$object->Altitude>0)."</td><td nowrap>Q/Times Enforced:</td><td align='right'>".yesno($object->EnforceQualifying)."</td></tr>";
	     $output.="</table>";

	     $output.="<hr align='left' width='435'>";

	     $output.="<table width='435px' cellSpacing='5' cellPadding='5' border='0'>";
	     $output.="<tr><td vAlign='top' width='76'>Location:</td><td vAlign='top'>".$object->Location."</td></tr>";
	     $output.="<tr><td vAlign='top'>Remarks:</td><td vAlign='top'>".$object->Remarks."</td></tr>";
	     $output.="</table>";

	     $output.="<hr align='left' width='435'>";

	     $output.="<table cellSpacing='5' cellPadding='5' border='0' width='435px'>";
	     $output.="<tr><td width='134'>Individual Entries:</td><td width='77' align='right'>".hasvalue('R ',$object->IndCharge)."</td><td width='117'>Surcharge</td><td align='right'>".hasvalue('R ',$object->SurCharge)."</td></tr>";
	     $output.="<tr><td width='134'>Relay Entries:</td><td width='77' align='right'>".hasvalue('R ',$object->RelCharge)."</td><td width='117'>Team Charge:</td><td align='right'>".hasvalue('R ',$object->TeamFee)."</td></tr>";
	     $output.="<tr><td width='134'>Facility Charge:</td><td width='77' align='right'>".hasvalue('R ',$object->FacilityFee)."</td><td>Sanction #:</td><td align='right'>".hasvalue('',$object->Sanction)."</td></tr>";
	     $output.="</table>";

	     $output.="<hr align='left' width='435'>";

	     $output.="<table cellSpacing='5' cellPadding='5' border='0' width='435px'>";
	     $output.="<td colspan='4'><u>Instructions/Directions:</u></td></tr><tr>";
	     $output.="<td colspan='4'>".$object->Instructions."</td></tr>";
	     $output.="</table></td>";

	     $output.="<td valign='top' style='padding-left:30px;'><b>Time Selection infomation</b><br><br><table border='0' cellpadding='1'>";
	     $output.="<tr><td style='padding-bottom:5px;' width='60'><b>Course</b></td><td width='200'><b>Desciption</b></td></tr>";
	     $output.="<tr><td>L</td><td>Convert all times to LC</td></tr>";
	     $output.="<tr><td>S</td><td>Convert all times to SC</td></tr>";
	     $output.="<tr><td>Y</td><td>Convert all times to Yards</td></tr>";
	     $output.="<tr><td>LO</td><td>&nbsp;LC Times only</td></tr>";
	     $output.="<tr><td>SO</td><td>SC Times only</td></tr>";
	     $output.="<tr><td style='padding-bottom:15px;'>YO</td><td style='padding-bottom:15px;'>Yards Times only</td></tr>";
	     $output.="<tr><td>YSL</td><td valign='top' rowspan='4'>Times selected by course order.<br>Example: LSY order would be<br>L - LC, then S - SC then,<br>&nbsp;Y-Yards</td></tr>";
	     $output.="<tr><td>YLS</td></tr>";
	     $output.="<tr><td>LSY</td></tr>";
	     $output.="<tr><td>SLY</td></tr></table><b>N.B Please note we don't support<br> Yards or Yard Conversions!</b></td></tr></table>";
			/*$object->Location
			"http://www.brabysmaps.co.za/ananzi/directions.asp?f_xy=&t_xy=&f_bookmark=0%2C0&f_address=&f_area=&t_bookmark=0%2C0&t_address="

			Kings+Park%2C
			&t_area=durban*/
	  }
	break;

      default:
	switch(arg(3))
	  {
	   case 'results': //Idividual results
	       {
		  switch( arg(2))
		    {
		     case 'event':
		       $Where = 'where e.MtEvent=%d';

		       break;
		     case 'events':
		       $Where = 'where e.Meet=%d and e.MtEv=%d';
		       break;
		     case '':
		    }

		  $query = "select  m.Meet,m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m ".$Where." and e.Meet=m.Meet";
		  $result = db_query($query,arg(4),arg(5));
		  $object = db_fetch_object($result);
		  $meet = $object->Meet;
		  $ev = $object->MtEv;
		  drupal_set_title($object->MName.' Meet'."&nbsp;<br>");
		  setseasons_breadcrumb(array(l('Meets','meets/'.arg(1)),l('Events','meets/'.arg(1).((arg(2)=='event')?'/events/'.$meet:'/event/'.$meet.'/'.$ev))));

		  $headers[] = array('data' => t('#'), 'width' => '20px');
		  $headers[] = array('data' => t('Time'), 'width' => '60px');
		  $headers[] = array('data' => t('Athlete Name'), 'width' => '250px');
		  $headers[] = array('data' => t('M/F'), 'width' => '30px');
		  $headers[] = array('data' => t('Age'), 'width' => '40px');
		  $headers[] = array('data' => t('Team'), 'width' => '80px');
		  $headers[] = array('data' => t('Points'), 'width' => '30px');
		  $headers[] = array('data' => t('Best'), 'width' => '40px');

		  $query = "(select e.MtEvent, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke,e.I_R, e.Course, round((r.SCORE -r2.SCORE)/100,2) AS improv, MIN(r2.SCORE) as fastest, a.Athlete, a.Last, a.First, a.Sex,r.F_P , If(r.PLACE>0,r.PLACE,'') As PLACE,r.MTEVENT, r.NT, r.SCORE,IF(r.POINTS>0,Round(r.POINTS/10),'') as POINTS, r.Age, t.TCode, t.LSC";
		  $query.= " from (((".$tm4db.".mtevent_".$season." as e left join ".$tm4db.".result_".$season." as r on (e.MtEvent=r.MTEVENT)) left join ".$tm4db.".result_".$season." as r2 ON (r.Course=r2.Course and r.STROKE=r2.STROKE AND r.DISTANCE=r2.DISTANCE and r.ATHLETE=r2.ATHLETE And r2.RBest=True)) left join ".$tm4db.".athlete_".$season." as a on (r.ATHLETE= a.Athlete)) left join ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team) ";
		  $query.= $Where." GROUP BY e.MtEvent, r.ATHLETE order by e.Meet,e.MtEv,e.MtEvX, r.F_P,r.NT,r.PLACE,r.SCORE)";

		  //$output=$query;

		  $result = db_query($query,arg(4),arg(5));
		  //drupal_set_message('count: '.db_num_rows($result));
		  $output.= '<table><tr><td>';
		  //Grouping Fields
		  $F_P= NULL;
		  $Event=NULL;
		  //$First = false;
		  while ($object = db_fetch_object($result))
		    {
		       if($Event <> $object->MtEvent)
			 {
			    $F_P = $object->F_P;
			    $Event = $object->MtEvent;
			    //if($rows==NULL && $First)
			    //$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
			    //$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));
			    //$First = true;
			    if($rows !=NULL)
			      $output.= theme('table', $headers, $rows).'<br>';

			    $output.= "<br><br><p class='title' align='left'><b><small>Event: ".$object->MtEv.''.$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->Sex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p><br>';
			    if($object->MTEVENT == NULL)
			      {
				 $output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
				 continue;
			      }
			    //$output.= "<br><p class='title' align='left'><b>Event: ".$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->ESex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.t(FP($object->F_P)).'s'.'</b></p>';
			    $output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
			    $rows = NULL;
			 }

		       if($F_P <> $object->F_P)
			 {
			    $F_P = $object->F_P;
			    //Heading for Grouping
			    //if($rows==NULL && $First)
			    //$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
			    //$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));

			    if($rows !=NULL)
			      $output.= theme('table', $headers, $rows).'<br>';
			    $output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
			    $rows = NULL;
			 }

		       $link='athlete/'.arg(1).'/meet_times/'.$object->Athlete.'/'.$meet;
		       if($object->PLACE>0)
			 $rows[] = array($object->PLACE,Score($object->NT,$object->SCORE),( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->Age, $object->TCode."-".$object->LSC ,$object->POINTS,' '.(($object->improv==0)?'':(($object->improv>0)?'+'.$object->improv:"<font color='#000099'><b>".$object->improv.'</b></font>')).'</small>');
		       else
			 $rows[] = array(NT($object->NT),get_time($object->SCORE),( ($object->Last==NULL)?'Athlete not found':l(t($object->Last.", ".$object->First), $link)), $object->Sex, $object->Age, $object->TCode."-".$object->LSC , $object->POINTS,'');

		    }
		  if($rows !=NULL)
		    $output.= theme('table', $headers, $rows);

		  //$output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';

					/*if (!$rows)
					{
						$rows[] = array(array('data' => t('There are no results for this event, click '.l(t('here'), 'meets/'.arg(1).'/'.arg(2).'/event/'.arg(4)).' to go back.'), 'colspan' => 8));
					}
					$output.= theme('table', $headers, $rows);*/
		  $output.= '<br></td></tr></table>';

	       }
	     break;

	   case 'result': //Relay results

	     switch( arg(2))
	       {
		case 'event':
		  $Where = 'where e.MtEvent=%d';
		  break;
		case 'events':
		  $Where = 'where e.Meet=%d and e.MtEv=%d';
		  break;
		case '':
	       }

	     $query = "select m.meet,m.MName, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke, e.Course from ".$tm4db.".mtevent_".$season." e right join ".$tm4db.".meet_".$season." m on (e.Meet=m.Meet) ".$Where." ";
	     $result = db_query($query,arg(4),arg(5));
	     $object = db_fetch_object($result);
	     $meet = $object->meet;
	     $ev = $object->MtEv;
	     drupal_set_title($object->MName.' Meet'."&nbsp;<br>");
	     setseasons_breadcrumb(array(l('Meets','meets/'.arg(1)),l('Events','meets/'.arg(1).((arg(2)=='event')?'/events/'.$meet:'/event/'.$meet.'/'.$ev))));

	     $joins ='';
	     $brackets='';
	     $athletes='';
	     for($c=1;$c<8;$c++)
	       {
		  $joins.=' left join '.$tm4db.'.athlete_'.$season.' as a'.$c.' on (y.ATH'.$c.'=a'.$c.'.Athlete))';
		  $brackets.='(';
		  $athletes.=', a'.$c.'.athlete as athlete_'.$c.', a'.$c.'.Last as last_'.$c.', a'.$c.'.First as first_'.$c.'';
	       }
	     $query ="(select e.MtEvent, e.MtEv, e.MtEvX, e.Lo_Hi, e.Sex as ESex, e.Distance, e.Stroke,e.I_R, e.Course,r.MTEVENT, r.F_P, If(r.PLACE>0,r.PLACE,'') As PLACE, r.NT, r.SCORE, IF(r.POINTS>0,Round(r.POINTS/10),'') as POINTS";
	     $query .=", y.Sex, y.LETTER, t.TName, t.TCode, t.LSC ".$athletes;
	     $query .=" From ".$brackets."(((".$tm4db.".mtevent_".$season." as e left join ".$tm4db.".result_".$season." as r on (e.MtEvent=r.MTEVENT)) left join ".$tm4db.".relay_".$season." as y on (r.ATHLETE=y.Relay)) left JOIN ".$tm4db.".team_".$season." as t on (r.TEAM=t.Team)) ".$joins;
	     $query .=" ".$Where." and (r.I_R='R' Or r.I_R IS NULL) Order By e.Meet,e.MtEv,e.MtEvX, r.F_P,r.NT,r.PLACE,r.SCORE)";
	    // $output.=$query;

	     $result = db_query($query,arg(4),arg(5));

	     $headers[] = array('data' => t('#'), 'width' => '20px');
	     $headers[] = array('data' => t('Time'), 'width' => '60px');
	     $headers[] = array('data' => t('Relay Team'), 'width' => '250px');
	     $headers[] = array('data' => t('M/F'), 'width' => '30px');
	     $headers[] = array('data' => t('Team'), 'width' => '80px');
	     $headers[] = array('data' => t('Points'), 'width' => '30px');

	     $athheaders[] = array('data' => t('Athlete'), 'width' => '250px');

	     $output.= '<table><tr><td>';
	     //Grouping Fields
	     $F_P= NULL;
	     $Event=NULL;
	     $First = false;
	     while ($object = db_fetch_object($result))
	       {
		  if($Event <> $object->MtEvent)
		    {
		       $F_P = $object->F_P;
		       $Event = $object->MtEvent;
							/*if($rows==NULL && $First)
							$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));
							$First = true;*/

		       if($rows !=NULL)
			 $output.= theme('table', $headers, $rows).'<br>';

		       $output.= "<br><br><p class='title' align='left'><b><small>Event: ".$object->MtEv.''.$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->Sex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p><br>';
		       if($object->MTEVENT == NULL)
			 {
			    $output.= '<p align=\'center\'><b>'.t('There are no results for this event').'</b></p>';
			    continue;
			 }

		       //$output.= "<br><p class='title' align='left'><b>Event: ".$object->MtEvX.' &nbsp;&nbsp;'.Gender($object->ESex).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.t(FP($object->F_P)).'s'.'</b></p>';
		       $output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
		       $rows = NULL;
		    }

		  if($F_P <> $object->F_P)
		    {
		       $F_P = $object->F_P;
		       //Heading for Grouping
		       //	if($rows==NULL && $First)
		       //	$rows[] = array(array('data' => t('There are no results for this event'), 'colspan' => 8));

		       if($rows !=NULL)
			 $output.= theme('table', $headers, $rows).'<br>';
		       $output.= '<p align=\'center\'><b>'.t(FP($object->F_P)).'s</b></p>';
		       $rows = NULL;
		    }

		  $link = "swimmers_results/".arg(2)."/toptimes/".$object->Athlete;
		  if($object->PLACE>0)
		    $rows[] = array($object->PLACE,Score($object->NT,$object->SCORE),$object->LETTER.(($object->TName==NULL)?' Team not found':' &nbsp;'.$object->TName), $object->Sex, $object->TCode."-".$object->LSC ,$object->POINTS);
		  else
		    $rows[] = array(NT($object->NT),get_time($object->SCORE),$object->LETTER.(($object->TName==NULL)?' Team not found':' &nbsp;'.$object->TName), $object->Sex, $object->TCode."-".$object->LSC ,$object->POINTS);
						
						/*//$object = db_fetch_array($result);
						$aths='';
						for ($i=0; $i<8; $i++)
						if($object['athlete_'.$i]!=NULL)
							$aths .= l($object['last_'.$i].",".$object['first_'.$i], "swimmers_results/".arg(2)."/toptimes/".$object['athlete_'.$i]).' &nbsp;&nbsp;';

						$rows[] = array('',array('data' =>$aths , 'colspan' => 7));
						$aths = NULL;
*/
	       }
	     if($rows !=NULL)
	       $output.= theme('table', $headers, $rows);
					/*if (!$rows)+
					{
						$rows[] = array(array('data' => t('There are no results for this event, click '.l(t('here'), 'meets/'.arg(1).'/'.arg(2).'/event/'.arg(4)).' to go back.'), 'colspan' => 8));
					}
					$output.= theme('table', $headers, $rows);*/
	     $output.= '</td></tr></table>';

	     break;

	   default://means its event or events
	     switch(arg(2))
	       {
		case 'events_info':
		    {

		       $query = "select SQL_CACHE m.QTSS,m.QTS,m.QTLS,m.QTL, m.MName FROM ".$tm4db.".meet_".$season." as m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Meet=%d";
		       $result = db_query($query,arg(3));
		       $object = db_fetch_object($result);
		       drupal_set_title($object->MName.' Meet');
		       setseasons_breadcrumb(array(l('Meets','meets/'.arg(1))));

		       $output.="<div class='tabs'><ul class='tabs primary'>";
		       $output.="<li>".l('Info','meets/'.arg(1).'/info/'.arg(3))."</li>";
		       $output.=" <li class='active'>".l('Events','meets/'.arg(1).'/events_info/'.arg(3))."</li>";
		       $output.="</ul></div>";

		       $headers[] = array('data' => t('Sess'), 'width' => '30px');
		       $headers[] = array('data' => t('Event'), 'width' => '50px');
		       $headers[] = array('data' => t('Gender'), 'width' => '60px');
		       $headers[] = array('data' => t('Age'), 'width' => '100px');
		       $headers[] = array('data' => t('Distance'), 'width' => '50px');
		       $headers[] = array('data' => t('Stroke'), 'width' => '80px');
		       $headers[] = array('data' => t('I/R'), 'width' => '50px');
		       $headers[] = array('data' => t('Fee'), 'width' => '60px');
		       $headers[] = array('data' => t('Course'), 'width' => '40px');
		       if(($QTL=$object->QTL)>0)
			 $headers[] = array('data' => t('LC Slower'), 'width' => '90px');
		       if(($QTLS=$object->QTLS)>0)
			 $headers[] = array('data' => t('LC Faster'), 'width' => '90px');
		       if(($QTS=$object->QTS)>0)
			 $headers[] = array('data' => t('SC Slower'), 'width' => '90px');
		       if(($QTSS=$object->QTSS)>0)
			 $headers[] = array('data' => t('SC Faster'), 'width' => '90px');

		       $result = db_query("Select FastCut,SlowCut,Fast_L,Slow_L, Round(Fee,2) as Fee,Session, MtEvent, IF(Count(MtEvX)=1,Lo_Hi,'*') as Lo_Hi ,MtEv, IF(Count(Distinct Sex)=1,Sex,'X') As Sex, Distance, Stroke, I_R,If(Count(*)>0,Count(*),1) as Events, Course FROM ".$tm4db.".mtevente_".$season." as e WHERE e.MtEv>0 and  Meet=%d Group by MtEv order by Session, MtEv",arg(3));

		       while ($object = db_fetch_object($result))
			 {
			    $link = 'meets/'.arg(1).'/event_info/'.arg(3).'/'.$object->MtEv;
			    $temp[] = $object->Session;

			    $temp[] = ($object->Events == 1)?$object->MtEv:l($object->MtEv, $link);
			    $temp[] =Gender($object->Sex);
			    $temp[] = Age($object->Lo_Hi);
			    $temp[] =  $object->Distance."m";
			    $temp[] = Stroke($object->Stroke);
			    $temp[] =  IR($object->I_R);
			    $temp[] = ($object->Events==1)?$object->Fee:'';
			    $temp[] = Course(0,$object->Course);
			    if($object->Events == 1)
			      {
				 if($QTL>0)
				   $temp[]=get_time($object->Fast_L);
				 if($QTLS>0)
				   $temp[]=get_time($object->Slow_L);
				 if($QTS>0)
				   $temp[]=get_time($object->FastCut);
				 if($QTSS>0)
				   $temp[]=get_time($object->SlowCut);
			      }
			    else
			      {
				 if($QTL>0)
				   $temp[]='';
				 if($QTLS>0)
				   $temp[]='';
				 if($QTS>0)
				   $temp[]='';
				 if($QTSS>0)
				   $temp[]='';
			      }
			    $rows[] = $temp;
			    $temp=null;
			 }
		       $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
		    }
		  break;

		case 'event_info':
		    {
		       $query = "select SQL_CACHE m.QTSS,m.QTS,m.QTLS,m.QTL, m.MName,e.Lo_Hi, e.Distance, e.Stroke,e.Sex, e.Course, e.I_R from ".$tm4db.".mtevente_".$season." e, ".$tm4db.".meet_".$season." m where m.Meet=%d And e.MtEv=%d and e.Meet=m.Meet";
		       $result = db_query($query,arg(3),arg(4));
		       $object = db_fetch_object($result);

		       drupal_set_title($object->MName.'Meet');
		       setseasons_breadcrumb(array(l('Meets','meets/'.arg(1)),l('Events','meets/'.arg(1).'/events_info/'.arg(3))));
		       //.' Meet'."&nbsp;<br><p><b><small>Event: ".arg(4).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p>');

		       $output .= "<br><p class='title' align=\'center\'>"."<small>Event: ".arg(4).' &nbsp;&nbsp;'.Gender($object->Sex).' &nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course)."</small></p><br>";

		       $headers[] = array('data' => t('Event'), 'width' => '50px');
		       $headers[] = array('data' => t('Age'), 'width' => '100px');
		       $headers[] = array('data' => t('Fee'), 'width' => '60px');
		       if(($QTL=$object->QTL)>0)
			 $headers[] = array('data' => t('LC Slower'), 'width' => '90px');
		       if(($QTLS=$object->QTLS)>0)
			 $headers[] = array('data' => t('LC Faster'), 'width' => '90px');
		       if(($QTS=$object->QTS)>0)
			 $headers[] = array('data' => t('SC Slower'), 'width' => '90px');
		       if(($QTSS=$object->QTSS)>0)
			 $headers[] = array('data' => t('SC Faster'), 'width' => '90px');

		       $result = db_query("Select Round(Fee,2) as Fee,FastCut,SlowCut,Fast_L,Slow_L,MtEvent, MtEvX, Sex, Lo_Hi, I_R FROM ".$tm4db.".mtevente_".$season." WHERE Meet=%d And MtEv=%d order by MtEvX",arg(3),arg(4));

		       while ($object = db_fetch_object($result))
			 {
			    $temp[]= $object->MtEvX;
			    $temp[]= Age($object->Lo_Hi);
			    $temp[]=$object->Fee;
			    if($QTL>0)
			      $temp[]=get_time($object->Fast_L);
			    if($QTLS>0)
			      $temp[]=get_time($object->Slow_L);
			    if($QTS>0)
			      $temp[]=get_time($object->FastCut);
			    if($QTSS>0)
			      $temp[]=get_time($object->SlowCut);

			    $rows[] = $temp;
			    $temp=null;
			 }
		       $output.= theme('table', $headers, $rows);
		    }
		  break;

		case 'events':
		    {

		       $query = "select SQL_CACHE IF(e.Meet Is Null,1,0) as results, m.MName FROM ".$tm4db.".meet_".$season." as m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Meet=%d";
		       $result = db_query($query,arg(3));
		       $object = db_fetch_object($result);
		       $display_link = $object->results;
		       drupal_set_title($object->MName.' Meet');
		       setseasons_breadcrumb(array(l('Meets','meets/'.arg(1))));
		       $output.="<div class='tabs'><ul class='tabs primary'>";
		       $output.="<li>".l('Info','meets/'.arg(1).'/info/'.arg(3))."</li>";
		       $output.=" <li class='active'>".l('Events','meets/'.arg(1).'/events/'.arg(3))."</li>";
		       If($display_link==0)
			 {
			    $output.="<li>".l('Individual Points','meets/'.arg(1).'/points/'.arg(3))."</li>";
			    $output.="<li>".l('Team Points','meets/'.arg(1).'/team_points/'.arg(3))."</li>";
			 }
		       $output.="</ul></div>";

		       $headers[] = array('data' => t('Event'), 'width' => '50px');
		       $headers[] = array('data' => t('Gender'), 'width' => '60px');
		       $headers[] = array('data' => t('Age'), 'width' => '100px');
		       $headers[] = array('data' => t('Distance'), 'width' => '50px');
		       $headers[] = array('data' => t('Stroke'), 'width' => '80px');
		       $headers[] = array('data' => t('I/R'), 'width' => '40px');
		       $headers[] = array('data' => t('Course'), 'width' => '40px');

		       $result = db_query("Select DISTINCT MtEvent, IF(Count(MtEvX)=1,Lo_Hi,'*') as Lo_Hi ,MtEv, IF(Count(Distinct Sex)=1,Sex,'X') As Sex, Distance, Stroke, I_R,If(Count(*)>0,Count(*),1) as Events, Course, Sum(Results) as Results FROM ".$tm4db.".mtevent_".$season." WHERE Meet=%d Group by MtEv order by MtEv",arg(3));

		       while ($object = db_fetch_object($result))
			 {

			    $link = 'meets/'.arg(1).'/'.(($object->Events==1)?'event/'.(($object->I_R =='I')?'results/':'result/').$object->MtEvent:((($object->Results)<$min_display)?'events/'.(($object->I_R =='I')?'results/':'result/').arg(3).'/'.$object->MtEv:'event/'.arg(3).'/'.$object->MtEv));
			    //$link = 'meets/'.arg(1).'/'.((($object->Sex=='X')?((($object->Results)<$min_display)?'events/'.(($object->I_R =='I')?'results/':'result/').arg(3).'/'.$object->MtEv:'event/'.arg(3).'/'.$object->MtEv):((($object->I_R =='I')?'event/results/':'event/result/').$object->MtEvent)));
			    $rows[] = array((($display_link==0)?l(t($object->MtEv.(($object->Events>1 && $object->Results<$min_display)?'*':'')), $link):$object->MtEv),Gender($object->Sex), Age($object->Lo_Hi), $object->Distance."m", Stroke($object->Stroke), IR($object->I_R), Course(0,$object->Course));
			 }
		       $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
		    }
		  break;

		case 'event':
		    {

		       $query = "select m.MName,e.Lo_Hi, e.Distance, e.Stroke, e.Course, e.I_R from ".$tm4db.".mtevent_".$season." e, ".$tm4db.".meet_".$season." m where m.Meet=%d And e.MtEv=%d and e.Meet=m.Meet";
		       $result = db_query($query,arg(3),arg(4));
		       $object = db_fetch_object($result);

		       drupal_set_title($object->MName.'Meet');
		       setseasons_breadcrumb(array(l('Meets','meets/'.arg(1)),l('Events','meets/'.arg(1).'/events/'.arg(3))));
		       //.' Meet'."&nbsp;<br><p><b><small>Event: ".arg(4).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course).'</small></b></p>');

		       $output .= "<br><p class='title' align=\'center\'>"."<small>Event: ".arg(4).' &nbsp;&nbsp;'.Age($object->Lo_Hi).' &nbsp;'.$object->Distance.'m &nbsp;'.Stroke($object->Stroke).' &nbsp;&nbsp;'.IR($object->I_R).' &nbsp;'.Course(1,$object->Course)."</small></p><br>";

		       $output.='<br>'.l('All Events Results','meets/'.arg(1).'/'.(($object->I_R =='I')?'events/results/':'events/result/').arg(3).'/'.arg(4)).'<br><br>';
		       $headers[] = array('data' => t('Event'), 'width' => '50px');
		       $headers[] = array('data' => t('Gender'), 'width' => '60px');
		       $headers[] = array('data' => t('Age'), 'width' => '100px');

		       $result = db_query("Select MtEvent, MtEvX, Sex, Lo_Hi, I_R FROM ".$tm4db.".mtevent_".$season." WHERE Meet=%d And MtEv=%d order by MtEvX",arg(3),arg(4));

		       while ($object = db_fetch_object($result))
			 {
			    $link = 'meets/'.arg(1).'/'.(($object->I_R =='I')?'event/results/':'event/result/').$object->MtEvent;
			    $rows[] = array(l(t($object->MtEvX), $link),Gender($object->Sex), Age($object->Lo_Hi));

			 }
		       $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
		    }
		  break;

		default:
		    {

		       if(arg(2)==null)
			 {
			    drupal_set_title('Meet Types');
			    setseasons_breadcrumb($breadcrumb);

			    $headers[] = array('data' => t('Abbr'), 'width' => '40px');
			    $headers[] = array('nowrap'=>'nowrap','data' => t('Description'), 'width' => '175px');
			    $headers[] = array('nowrap'=>'nowrap','data' => t('Last Results in'), 'width' => '175px');
			    $headers[] = array('nowrap'=>'nowrap','data' => t('Next Meet info available'), 'width' => '175px');

			    $query.="Select SQL_CACHE c.abbr,c._desc,mr.*,me.* From ".$tm4db.".code_".$season."  as c left join (select *  from (select DISTINCT m.Meet AS MeetR, m.MName as MNameR,m.Type  from ".$tm4db.".meet_".$season."  m left join ".$tm4db.".mtevent_".$season."  e on (m.Meet=e.Meet) where e.Meet Is not Null and m.Type Is not Null and m.type !='' and m.Start is not null and m.End is not null order by m.end desc) as r";
			    $query.=" group by r.type) as mr on (c.abbr=mr.Type) left join ";
			    $query.=" (select *  from (select DISTINCT m.Meet AS MeetE, m.MName as MNameE,m.Type  from ".$tm4db.".meet_".$season."  m left join ".$tm4db.".mtevente_".$season."  e on (m.Meet=e.Meet) where e.Meet Is not Null and m.Type Is not Null and m.type !='' and m.Start >CURDATE() and m.End is not null order by m.end asc) as r";
			    $query.=" group by r.type) as me  on (c.abbr=me.Type) Where c.TYPE=3 order by abbr";
			   
			    $results = db_query($query);

			    $rows[] = array(l('ALL','meets/'.arg(1).'/ALL'),' Unofficial',null,null);
			    while($object = db_fetch_object($results))
			      if($object->abbr !=null)
				$rows[] = array(l($object->abbr,'meets/'.arg(1).'/'.$object->abbr),$object->_desc,l($object->MNameR,'meets/'.arg(1).'/events/'.$object->MeetR),l($object->MNameE,'meets/'.arg(1).'/info/'.$object->MeetE));

			    $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);

			 }
		       else
			 {
			    $confirm = variable_get('perfanal_rankcon', '');
			    $cntry = variable_get('perfanal_cntry', '');

			    drupal_set_title(((arg(2)!='ALL')?arg(2):((arg(3)!=null & $cntry !=null)?$cntry:'')).' Meets');
			    setseasons_breadcrumb(array(l('Meets Types','meets/'.arg(1))));
			    //$output.= highlight_js('meets');
			    //$output.= drupal_get_form('perfanal_meet_filters_form');

			    $headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
			    $headers[] = array('data' => t('Type'), 'width' => '20px');
			    $headers[] = array('data' => t('Start date'), 'width' => '130px','sort' => 'desc','field' => 'm.Start');
			    $headers[] = array('data' => t('End date'), 'width' => '100px');
			    $headers[] = array('data' => t('Course'), 'width' => '40px');
			    $headers[] = array('data' => t('Location'));
			    // order by m.Start DESC
			    //
			    //
			    
			       $rank_from_option = variable_get('perfanal_rank_from','y');
	     
			       $Sd = variable_get('perfanal_ranking_dd', '01');
			       $Sm = variable_get('perfanal_ranking_mm', '01');
			       $from_date = $season.'-'.$Sm.'-'.$Sd;
	
			    
			    $result = db_query("select SQL_CACHE DISTINCT IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$season." m left join ".$tm4db.".mtevent_".$season." e on (m.Meet=e.Meet) where m.Start is not null and m.End is not null  ".((arg(2)=='ALL')?'':"and m.Type='".arg(2)."'").((arg(3)==null)?'':("and (DATEDIFF(m.End,'".arg(3)."')<=-2 )".(($rank_from_option=='y')?"and (DATEDIFF(m.End,'".$from_date."')>=0 )":'')).(($confirm=='')?'':" and (isnull(m.sanction) or INSTR(m.sanction,'".((arg(2)=='ALL')?$cntry:arg(2))."')=0 )"))." ".tablesort_sql($headers));

			    while ($object = db_fetch_object($result))
			      {
				 $link = (($object->results==0)?'meets/'.arg(1).'/events/'.$object->Meet:'meets/'.arg(1).'/info/'.$object->Meet);

				 $class = ($object->results==0)?' green':' red';

				 $rows[] = array('class'=>$class,'data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location));
			      }
			    $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
			 }
		    }
		  break;
	       }
	     break;
	  }
	break;

     }

   return $output;
}

function theme_perfanal_meet_filters_form($form)
{
   $output.="<table><tr>";
   $output.= '<td>'.drupal_render($form['meettype']).'</td>';
   $output.= '<td>&nbsp;&nbsp;&nbsp;'.drupal_render($form['submit']).'</td>';
   $output.= '</tr></table>';
   return $output.drupal_render($form);
}

function perfanal_meet_filters_form_submit($form_id, $form_values)
{
   $type = $form_values["meettype"];
   if($type !=null)
     drupal_goto("meets/".arg(1)."/".$type);

}

function perfanal_meet_filters_form()
{
   $seasons = extract_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');

   $season = (($edit["season"]) ? $edit["season"] : '');
   if (!$season)
     {
	$rev_seasons = array_reverse($seasons, true);
	foreach ($rev_seasons as $key => $value)
	  $season = $key;
     }

   $results = db_query("Select SQL_CACHE * From ".$tm4db.".code_".$season." Where TYPE=3");

   $club_list['ALL'] = 'All';
   while($object = db_fetch_object($results))
     if($object->ABBR !=null)
       $club_list[$object->ABBR] = ($object->ABBR.' - '.$object->DESC);

   $form['meettype'] = array('#type' => 'select', '#options' => $club_list, '#default_value' => arg(1));
   $form['submit'] = array('#type' => 'submit', '#value' => t('Filter'));
   return $form;
}

/* swimmers results
******************************************************************************************/

function perfanal_athlete_filter_form()
{
   $edit = $_POST["edit"];
   $season = get_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');

   $alphaselect = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
   $filter_options['an'] = 'All Names';
   $filter_options['ln'] = 'Last Name';
   $filter_options['fn'] = 'First Name';
   for ($i=65; $i<91; $i++)
     $filter_options[chr($i)] = chr($i);

   $club_list = array('ALL' => 'All Clubs');
   $result = db_query("select Team,TCode from ".$tm4db.".team_".$season." order by TCode");
   while ($object = db_fetch_object($result))
     {
	$club_list[$object->Team] = $object->TCode;
     }

     $form['filteropt'] = array('#title'=>'Search (Name or & Surname)', '#type' => 'textfield', '#size' => 45,'#maxlength'=>40, '#default_value' => arg(6),
			      '#description'=>t('Please note this is an autocomplete search box.<br>Therefore pausing after a typed phrase will yield a match list.<br><b> Example type "Merwe" then stop typing.<br>I would advise one to leave out vd, van, de.</b><br>'),'#autocomplete_path'=>'athlete/'.arg(1).'/auto');

   $form['club'] = array('#title' => 'Clubs','#type' => 'select', '#options' => $club_list, '#default_value' => arg(3));
   $form['filterby'] = array('#title' => 'Name & Alpha','#type' => 'select', '#options' => $filter_options, '#default_value' => arg(5));

   $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));

   return $form;
}

function perfanal_athlete_filter_form_submit($form_id, $form_values)
{
   $params = (($form_values["club"]) ? $form_values["club"] : '').
     (($form_values["filterby"]) ? '/'.$form_values["filterby"] : '').
     (($form_values["filteropt"]) ? '/'.$form_values["filteropt"] : '');

   drupal_goto('athlete/'.arg(1).'/list/'.$params);
}

function athlete_heading($tm4db,$season,$athlete)
{
   drupal_add_js(path().'/js/athlete.js',null,'header',true,TRUE);

   $option = arg(2);
  
		  $query = "Select SQL_CACHE a.*,t.*,c.*, extract(YEAR FROM from_days(datediff(CURDATE(), a.Birth))) as Age from ".$tm4db.".athlete_".$season." as a left join ".$tm4db.".team_".$season." as t on (a.team1=t.team)  left join ".$tm4db.".code_".$season." as c on (a.WMGroup = c.ABBR)  where Athlete= %d";
		   //$output.=$query;
		   $result= db_query($query,$athlete);
		   $object = db_fetch_object($result);
		   if($object ==null)
		     {
			drupal_set_message("Error Athlete was not found!");
			drupal_goto('athlete');
		     }
		   $my_data= $object->First.' '.(($object->Initial==null)?'':$object->Initial.'. ').$object->Last.'&nbsp; '.Gender($object->Sex).'&nbsp; '.$object->Age.'yrs &nbsp;('.get_date($object->Birth).') &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.$object->TName.' - '.$object->LSC.' : '.$object->_DESC.'';
	    
    

   drupal_set_title($my_data);
   $output.="<br><div class='tabs'><ul class='tabs primary'>";
   $output.="<li ".(($option =='top_times')?"class='active'":'').">".l('Top','athlete/'.arg(1).'/top_times/'.$athlete)."</li>";
   $output.="<li ".(($option =='all_times')?"class='active'":'').">".l('All','athlete/'.arg(1).'/all_times/'.$athlete)."</li>";
   $output.="<li ".(($option =='entries')?"class='active'":'').">".l('Entries','athlete/'.arg(1).'/entries/'.$athlete)."</li>";
   $output.="<li ".(($option =='standards')?"class='active'":'').">".l('Apply Standard','athlete/'.arg(1).'/standards/'.$athlete)."</li>";
   $output.="<li ".(($option =='graphs')?"class='active'":'').">".l('Perfomance Graphs','athlete/'.arg(1).'/graphs/'.$athlete)."</li>";
   //$output.="<li ".(($option =='compare')?"class='active'":'').">".l('Comparisions','athlete/'.arg(1).'/compare/'.$athlete)."</li>";
   $output.="</ul></div>";

   return $output;
}

function perfanal_athlete()
{
   setseasons_breadcrumb(null);
   $edit = $_POST["edit"];
   $season = get_seasons();
   $tm4db = variable_get('perfanal_database', 'perfanal');
   $min_display = variable_get('perfanal_min_display', '20');

   switch(arg(2))
     {
	case'auto':
	  {
	     $auto = array();
	     $name_filter = "( LCASE(CONCAT(CONCAT(a.Last,a.First),a.Last)) like '".str_replace(" ", "%%",(' '.strtolower(arg(3)).' '))."' ) and";
	     $result = db_query("select SQL_CACHE a.Athlete,a.Last,a.First,a.Sex,t.TCode,extract(YEAR FROM from_days(datediff(CURDATE(), a.Birth))) as Age  from ".$tm4db.".athlete_".$season." as a inner join ".$tm4db.".team_".$season." as t on (a.Team1=t.Team) where ".$name_filter."  a.Group='A' order by a.Last,a.first limit 15");
	     while($object = db_fetch_object($result))
	       $auto [$object->Last.' '.$object->First] = "".$object->Last.", ".$object->First." - <b>".$object->Sex."</b> ".$object->Age." ".$object->TCode." ". $object->WMGroup;

	     print drupal_to_js($auto);
	     exit();
	  
	  }
	break;

      case 'top_times':
	  {

	     $output.= athlete_heading($tm4db,$season,arg(3));

	     $query="select ".course_conversion($tm4db,$season)." as Converted, r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet, (Select Group_CONCAT( CONCAT(CONCAT(SplitIndex,','),Split)) as Splits From ".$tm4db.".splits_".$season." Where SplitID=r.Result) as Splits from ".$tm4db.".result_".$season." as r left join ".$tm4db.".meet_".$season." as m on (r.MEET=m.Meet ) where r.ATHLETE=%d and r.RBest=1 order by r.COURSE, r.STROKE,r.Distance, r.SCORE";

	     $result = db_query($query,arg(3));

	     $header[] = array('data' => t('Time'), 'width' => '70px');
	     $header[] = array('data' => t('Distance'), 'width' => '70px');
	     $header[] = array('data' => t('Stroke'), 'width' => '80px');
	     $header[] = array('data' => t('Conv SC'), 'width' => '70px');
	     $header[] = array('data' => t('Rounds'), 'width' => '50px');
	     $header[] = array('data' => t('Date'), 'width' => '90px');
	     $header[] = array('data' => t('Meet'), 'width' => '320px');
	     $i=0;
	     while ($object = db_fetch_object($result))
	       {
		  $time = Score($object->NT,$object->SCORE);
		  $link = 'meets/'.arg(1).'/event/results/'.$object->MtEvent;
		  if (strtolower($object->COURSE) == "l")
		    $rowsL[] =array('valign'=>'top','onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array($time,$object->DISTANCE.'m'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>", Stroke($object->STROKE),get_time($object->Converted), FP($object->F_P),get_date($object->Start), l(t($object->MName), $link)));

		  if (strtolower($object->COURSE) == "s")
		    $rowsS[] = array('onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array($time, $object->DISTANCE.'m'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>", Stroke($object->STROKE),get_time($object->Converted), FP($object->F_P),get_date($object->Start), l(t($object->MName), $link)));
		  $i++;
	       }

	     $output.= "To view splits move cursor above result. Best viewed with FireFox  N.B If splits off page use mouse wheel to srcoll down.<br><br><b>Long Course - 50m</b>";
	     $output.= theme('table',$header, $rowsL,array('onmouseout'=>'hide_dis();'));
	     $output.= "<br><b>Short Course - 25m</b>";
	     $header[3] = array('data' => t('Conv LC'), 'width' => '70px');
	     $output.= theme('table', $header, $rowsS,array('onmouseout'=>'hide_dis();'));
	     $output.='<br><br><br><br><br><br><br>';

	     return $output;
	  }
      case 'all_times':
	  {

	     $output.= athlete_heading($tm4db,$season,arg(3));

	     $query="select r.fina, ".course_conversion($tm4db,$season)." as Converted, r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE,r.I_R, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet, (Select Group_CONCAT( CONCAT(CONCAT(SplitIndex,','),Split)) as Splits From ".$tm4db.".splits_".$season." Where SplitID=r.Result) as Splits from ".$tm4db.".result_".$season." as r left join ".$tm4db.".meet_".$season." as m on (r.MEET=m.Meet ) where r.ATHLETE=%d order by r.COURSE, r.STROKE,r.Distance,r.nt, m.Start";

	     $result = db_query($query,arg(3));

	     $header[] = array('width' => '80px');
	     $header[] = array('width' => '50px');
	     $header[] = array('width' => '15px');
	     $header[] = array('width' => '80px');
	     $header[] = array('width' => '40px');
	     $header[] = array('width' => '90px');
	     $header[] = array('width' => '320px');

	     $output.= "To view splits move cursor above result.  N.B Use Firefox and If splits off page use mouse wheel to srcoll.<br>Please note that LC Times Converted to SC Times and visa vesa.<br>";

	     $i=0;

	     $Course=null;
	     $Stroke=null;
	     $Distance=null;
	     while ($object = db_fetch_object($result))
	       {
		  If($Course != $object->COURSE)
		    {
		       if($rows !=null)
			 $output.= theme('table', $header, $rows,array('onmouseout'=>'hide_dis();'));
		       $rows =null;
		       $Course = $object->COURSE;

		       $output.="<br><p><b>".Course(1,$Course)."</b></p>";
		    }
		  If($Stroke != $object->STROKE || $Distance != $object->DISTANCE)
		    {
		       if($rows !=null)
			 $output.= theme('table', $header, $rows,array('onmouseout'=>'hide_dis();'));
		       $rows =null;
		       $Stroke = $object->STROKE;
		       $Distance = $object->DISTANCE;

		       $output.="<br><b>".$Distance.'m '.Stroke($Stroke)."</b>";
		    }

		  $time = Score($object->NT,$object->SCORE);
		  $link = 'meets/'.arg(1).'/event/results/'.$object->MtEvent;
		  $rows[] = array('onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array($time,  FP($object->F_P)."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>",$object->I_R,get_time($object->Converted).'<small>'.(($object->COURSE=='L')?'S':(($object->COURSE=='S')?'L':'')).'</small>',$object->fina, get_date($object->Start), l(t($object->MName), $link)));
		  $i++;
	       }

	     $output.= theme('table', $header, $rows,array('onmouseout'=>'hide_dis();'));

	     $output.='<br><br><br><br><br><br><br>';

	     return $output;
	  }
      case 'meet_times':
	  {
	     $output.= athlete_heading($tm4db,$season,arg(3));

	     $result= db_query("Select SQL_CACHE m.MName from ".$tm4db.".meet_".$season." as m Where m.Meet=%d",arg(4));
	     $object = db_fetch_object($result);
	     $output.= "To view splits move cursor above result. Best viewed with FireFox  N.B If splits off page use mouse wheel to srcoll down.<br><br><b>".$object->MName." Meet</b><br><br>";

	     $query="select e.MtEv,e.MtEvX,r.MTEVENT, r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE, r.F_P,r.I_R,r.Course, (Select Group_CONCAT( CONCAT(CONCAT(SplitIndex,','),Split)) as Splits From ".$tm4db.".splits_".$season." Where SplitID=r.Result) as Splits from ".$tm4db.".result_".$season." as r left join ".$tm4db.".mtevent_".$season." as e on (r.MTEVENT=e.MtEvent ) where r.ATHLETE=%d and e.Meet=%d order by e.MtEv,e.MtEvX";

	     $result = db_query($query,arg(3),arg(4));

	     $header[] = array('data' => t('Event'), 'width' => '50px');
	     $header[] = array('data' => t('Time'), 'width' => '70px');
	     $header[] = array('data' => t('Distance'), 'width' => '70px');
	     $header[] = array('data' => t('Stroke'), 'width' => '80px');
	     $header[] = array('data' => t('Rounds'), 'width' => '50px');
	     $header[] = array('data' => t('I/R'), 'width' => '50px');
	     $header[] = array('data' => t('Course'), 'width' => '40px');

	     $i=0;
	     while ($object = db_fetch_object($result))
	       {
		  $time = Score($object->NT,$object->SCORE);
		  $link = 'meets/'.arg(1).'/event/results/'.$object->MTEVENT;
		  $rowsL[] =array('onmouseover'=>"dis_splits(".$i.",'".$object->Splits."')" ,'data'=> array(l($object->MtEv.' '.$object->MtEvX,$link),$time,$object->DISTANCE.'m'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>", Stroke($object->STROKE), FP($object->F_P),IR($object->I_R), $object->Course));
		  $i++;
	       }

	     $output.= theme('table',$header, $rowsL,array('onmouseout'=>'hide_dis();'));

	     $output.='<br><br><br><br><br><br><br>';
	     return $output;
	  }

	break;

      case 'entries':
	  {
	     $LSeason = get_cur_seasons();

	     if(arg(3)== 'events' || arg(3)== 'mail' || arg(3)== 'confirm')
	       {

		  $result = db_query("select SQL_CACHE m.*,a.*, extract(YEAR FROM from_days(datediff(IF(m.AgeUp is null,m.Start,m.AgeUp), Birth))) as Age from ".$tm4db.".meet_".$LSeason." as m, ".$tm4db.".athlete_".$season." as a Where m.meet=%d and a.Athlete=%d",arg(5),arg(4));

		  $object = db_fetch_object($result);
		  if($object ==null)
		    {
		       drupal_set_message('meet not Found');
		       drupal_goto('athlete/entries/'.arg(4));
		    }

		  $enforce = $object->EnforceQualifying;
		  $enterqt = $object->EnterAtQTime;
		  $coursepref = substr($object->Course, 0, 1);
		  $multi = (($object->Course == 'L' || $object->Course == 'LO')?0:(($object->Course == 'S'||$object->Course == 'SO')?1:(3+(($coursepref=='L')?0:1))));
		  $meet = arg(5);
		   $age = $object->Age;
		  $since = $object->Since;
		  $since = ($since ==null || $since=='0000-00-00 00:00:00')?null:$since;
		  $restrictbest = $object->RestrictBest;
		  $restrictbest = ($restrictbest ==null || $restrictbest==0)?false:true;
		  $sex = $object->Sex;
		  $type = $obejct->Type;
		  $min_age = $object->MinAge;
		  $min_age = ($min_age==null)?0:$min_age;
		  $athlete = arg(4);
		  $output.=$restrictbest;
		  if(arg(3)== 'events') //entry page
		    {
		       $output.= athlete_heading($tm4db,$season,arg(4));

		        $output.="<table border='0' width='100%'><tr><td valign='top'>";

		       $output.='<br>'.l(t($object->MName),'meets/'.$LSeason.'/info/'.arg(5)).'<div id="noprint"><br><br>';
		       $output.="Age Update date: ".get_date((($ageUp !=null)?$ageUp:$object->Start))." (".$age."yrs)<br><br>";
		       $output.="Qualifying Times Enforced: ".yesno($object->EnforceQualifying);
		       $output.="<br><br>Min Open Age: ".hasvalue('',$min_age);

		       $output.="</div></td><td width='250px' valign='top'><div id='noprint'><br>".l("Course: ".$object->Course,'meets/'.$LSeason.'/info/'.arg(5))."<br><br>N.B Border Colors Apply to Slower than qt times.<br><br><br>Maxmium Entries: ".hasvalue('',$object->MaxIndEnt)."</td></div><td align='right'>";

		       $output.="<div id='noprint'><table class='entries' border='0' cellpadding='4px' width='359px'>";

		       $output.="<tr><td colspan='2'><b>Colors Key:</b></td></tr>";
		       $output.="<tr><td width='101' class='green'>Green</td><td><b>May enter with pleasure</b></td></tr>";
		       $output.="<tr><td width='101' class='yellow min_yellow'>Yellow/ Orange-border</td><td><b>Possible entry</b>, depends on  meet rules. haven't met qt times, but qt times aren't being enforced! </td></tr>";
		       $output.="<tr><td width='101' class='red min_red'>Red/ Brown-border</td><td><b>May not enter</b> as one does not meet pre-requisites for event.</td></tr>";
		       $output.="</table></div>";

		       $output.="</td></tr><tr><td colspan='3'>";
		    }
		  else
		    if(arg(3)== 'mail' || arg(3)== 'confirm') //mail page
		      {

			 if($_POST["meet"]==$meet & ( $_POST["email"]!=null || $_POST["cemail"]!=null) || arg(3)=='mail')
			   {}
			 else
			   {
			      drupal_set_message('Please Enter an email address');
			      drupal_goto('athlete/'.arg(1).'/entries/events/'.arg(4).'/'.arg(5));
			   }
			 drupal_add_js(path().'/js/athlete.js',null,'header',true,TRUE);

			 $query1 = "Select a.*,t.*, extract(YEAR FROM from_days(datediff(CURDATE(), a.Birth))) as Age from ".$tm4db.".athlete_".$season." as a left join ".$tm4db.".team_".$season." as t on (a.team1=t.team) where Athlete= %d";
			 $result1= db_query($query1,arg(4));
			 $object1 = db_fetch_object($result1);
			 if($object1 ==null)
			   {
			      drupal_set_message("Error Athlete was not found!");
			      drupal_goto('athlete');
			   }

			 if(arg(3)== 'confirm' || $_POST["email"]!=null)
			   {
			      $output.='<br>Please double check and confirm your entries are to be sent to \''.$_POST['email'].'\'.<br>if the email address is wrong, please enter the correct e-mail adress in the box below, else leave blank<br>';
			   }

			 drupal_set_title($object1->First.' '.(($object1->Initial==null)?'':$object1->Initial.'. ').$object1->Last.'&nbsp; '.Gender($object1->Sex).'&nbsp; '.$object1->Age.'yrs &nbsp;('.get_date($object1->Birth).') &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'.$object1->TName.' - '.$object1->LSC.'');
			 $output.='<br>'.l(t($object->MName),'meets/'.$LSeason.'/info/'.arg(5)).'<br><br>';
			 $output.= $object1->First.' '.(($object1->Initial==null)?'':$object1->Initial.'. ').$object1->Last.'&nbsp; '.Gender($object1->Sex).'&nbsp; '.$object1->Age.'yrs &nbsp;('.get_date($object1->Birth).') <br>'.$object1->TName.' - '.$object1->LSC.'<br><br>';

			 $subject = $object->MName .' Entries '.$object1->First.' - '.(($object1->Initial==null)?'':$object1->Initial.'. ').$object1->Last;

		      }

		  $output.='';
					/*
					Pref is the used for order of selection, of which course comes first.
					qt if 1 means time qualifies for entry, if 2 then he does not qulify but it is depened on weather qt times are enforced.
					qt 3 means time does not qualify, because there are qt times avalible just not for that course.
					qt of less than 10 means he does not meet the slower than qt time, but these times are not enforced.
					qt larger than 20 means does no qualify.
					*/
		  if($object->Course=='LO' ||$object->Course=='LS' ||$object->Course=='SL' ||$object->Course=='SO' || $object->Course=='S' || $object->Course=='L')
		    {
		       $query="";
		       $query.="SELECT SQL_CACHE f.*, min(f.qt) as qt, min(f.pref) as pref, min(f.conv) From ("; //select final information
		       $query.="SELECT h.* From (";// orders envents for preferance selection

		       $query.="SELECT f.*, min(f.SCORE) as SCORE2 From ("; //limits times to top time in each course
		       $query.="SELECT t.* From ("; //test all times
		        if($object->Course=='LO')
			 {
				 $qtset=' (e.Fast_L>0) Or (e.Slow_L>0)';
			    //long course only query
			    $query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L, e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.Slow_L>0),If(e.Slow_L>=r.Score,11,12),11) + If((e.Fast_L>0),If(e.Fast_L<=r.Score,0,-10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".$athlete;
			 }

		       if($object->Course=='LS') //Considers Muti course cut meets
			 {
				 $qtset='(e.FastCut>0) Or (e.Fast_L>0) Or (e.Slow_L>0) Or (e.SlowCut>0)';
				
			    //long course query
			 
			    $query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.Slow_L>0) Or (e.SlowCut>0),If(e.Slow_L>0,If(e.Slow_L>=r.Score,11,12),13),11) + If((e.FastCut>0) Or (e.Fast_L>0),If((e.Fast_L>0),If(e.Fast_L<=r.Score,0,-10),10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".$athlete;
			    
			    //Short course query
			    $query.=" union SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,2 as pref,If((e.Slow_L>0) Or (e.SlowCut>0),If(e.SlowCut>0,If(e.SlowCut>=r.Score,11,12),13),11) + If((e.FastCut>0) Or (e.Fast_L>0),If((e.FastCut>0),If(e.FastCut<=r.Score,0,-10),10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='S'  and r.ATHLETE =".$athlete;

			 }

		       if($object->Course=='L') //Covert all times to long course then Consider them, note preferance (pref is equal here =1)
			 {
				  $qtset=' (e.Fast_L>0) Or (e.Slow_L>0)';
			    //long course query
			    $query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE as SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.Slow_L>0),If(e.Slow_L>=r.Score,11,12),11) + If((e.Fast_L>0),If(e.Fast_L<=r.Score,0,-10),0) as qt  ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".$athlete;

			    //Short course query
			    $query.=" union SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,".course_conversion($tm4db,$season)." as SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,1 as pref,If((e.Slow_L>0),If(e.Slow_L>=".course_conversion($tm4db,$season).",11,12),11) + If((e.Fast_L>0),If(e.Fast_L<=".course_conversion($tm4db,$season).",0,-10),0) as qt  ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='S'  and r.ATHLETE =".$athlete;

			 }

		       if($object->Course=='SO')
			 {
				 $qtset='(e.FastCut>0) Or (e.SlowCut>0)';
			    //Short course only query
			    $query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L, e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.SlowCut>0),If(e.SlowCut>=r.Score,11,12),11) + If((e.FastCut>0),If(e.FastCut<=r.Score,0,-10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R!='L' and r.Course='S'  and r.ATHLETE =".$athlete;
			 }

		       if($object->Course=='SL')  //Considers Muti course cut meets
			 {	
				 $qtset='(e.FastCut>0) Or (e.Fast_L>0) Or (e.Slow_L>0) Or (e.SlowCut>0)';
				 //Short course query
			    $query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,r.SCORE as conv,1 as pref,If((e.Slow_L>0) Or (e.SlowCut>0),If(e.SlowCut>0,If(e.SlowCut>=r.Score,11,12),13),11) + If((e.FastCut>0) Or (e.Fast_L>0),If((e.FastCut>0),If(e.FastCut<=r.Score,0,-10),10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='S'  and r.ATHLETE =".$athlete;

			    //long course query
			    $query.=" union SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,2 as pref,If((e.Slow_L>0) Or (e.SlowCut>0),If(e.Slow_L>0,If(e.Slow_L>=r.Score,11,12),13),11) + If((e.FastCut>0) Or (e.Fast_L>0),If((e.Fast_L>0),If(e.Fast_L<=r.Score,0,-10),10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='L'  and r.ATHLETE =".$athlete;

			 }

		       if($object->Course=='S')  //Covert all times to shrt course then Consider them, note preferance (pref is equal here =1)
			 {
				 $qtset='(e.FastCut>0) Or (e.SlowCut>0)';
			    //Short course query
			    $query.=" SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,r.SCORE as SCORE,r.Course,m.MName,m.Start,r.SCORE as conv,1 as pref,If((e.SlowCut>0),If(e.SlowCut>=r.Score,11,12),11) + If((e.FastCut>0),If(e.FastCut<=r.Score,0,-10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='S'  and r.ATHLETE =".$athlete;

			    //long course query
			    $query.=" union SELECT r.I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee,".course_conversion($tm4db,$season)." as SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,1 as pref,If((e.SlowCut>0),If(e.SlowCut>=".course_conversion($tm4db,$season).",11,12),11) + If((e.FastCut>0),If(e.FastCut<=".course_conversion($tm4db,$season).",0,-10),0) as qt ";
			    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".mtevente_".$LSeason." as e on (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age."))";
			    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
			    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='L'  and r.ATHLETE =".$athlete;

			 }

		       $query.=" ) as t order by MtEv,MtEvX,pref,SCORE, Start desc";

		       
		       
		       $query.=") as f Group by MtEv,MtEvX,pref";

		       $query.=" union SELECT null as I_R,e.Session,e.FastCut,e.SlowCut,e.Fast_L,e.Slow_L,e.MtEv,e.MtEvX,e.Lo_Hi,e.Sex,e.Stroke,e.Distance,e.Fee, null as SCORE, null as Course, null as MName, '' as Start, null as conv,13 as pref,If( ".$qtset." ,33,11) as qt, null as SCORE2 ";
		       $query.=" From (".$tm4db.".mtevente_".$LSeason." as e) Where (e.Meet=".arg(5)." and e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')."  and (e.Sex='X' Or e.Sex='".$sex."') and floor(e.Lo_Hi/100) <= ".$age." AND (e.Lo_Hi%100) >= ".$age.")";

		       $query.=" ) as h  order by Session, MtEv,MtEvX,qt,pref,conv";

		       $query.=" ) as f Group by f.MtEv,f.MtEvX order by Session,MtEv,MtEvX,qt,pref,conv, Start desc";
		       
		       //$output.=$query;
		       $headers[] = array('data' => t('Ses'), 'width' => '30px');
		       $headers[] = array('data' => t('Event'), 'width' => '40px');
		       $headers[] = array('data' => t('Gen'), 'width' => '20px');
		       $headers[] = array('data' => t('Dis'), 'width' => '40px');
		       $headers[] = array('data' => t('Stroke'), 'width' => '60px');
		       $headers[] = array('data' => t('Age'), 'width' => '80px');
		       $headers[] = array('data' => t('Fee'), 'width' => '30px');
		       $headers[] = array('data' => t('En'), 'width' => '10px');
		       $headers[] = array('data' => t('Time'), 'width' => '80px');
		       $headers[] = array('data' => t('I/L'), 'width' => '20px');
		       $headers[] = array('data' => t('Date'), 'width' => '80px');
		       $headers[] = array('data' => t('Meet'), 'width' => '320px');
		       // order by m.Start DESC
		       if(arg(3)=='mail' & ($_POST["email"]==null || $_POST["cemail"]!=null))
			 $email=true;

		       $result = db_query($query);
		       $i=0;
		       $total = 0;
		       while ($object = db_fetch_object($result))
			 {
			    if(arg(3)!='events')
			      $selected = (($_POST["enter_".$object->MtEv.$object->MtEvX]==($object->MtEv.$object->MtEvX))?true:false);
			    else
			      $selected = false;

			    if($selected==true || arg(3)!='mail')
			      {
				 $timebox = get_time($object->conv);
				 if(($object->qt%10==1 & $object->conv !=null) || ($enforce==0 & $object->qt%10!=3 )|| $object->qt==11)
				   {
				      $total +=$object->Fee;

				      $enter = '<input id="enter_'.$object->Session.'" '.(($selected==true)?'checked':'').' type="checkbox" name="enter_'.$object->MtEv.$object->MtEvX.'" value="'.$object->MtEv.$object->MtEvX.'">';
				      if($object->conv ==null)// $enterqt
					if($email == false)
					  $timebox = '<input type="text" name="time_'.$object->MtEv.$object->MtEvX.'" size="10">';
				      else
					{
					   $timebox = $_POST["time_".$object->MtEv.$object->MtEvX].' c';
					}
				   }
				 else
				   $enter = '';

				 //$link = 'athlete/entries/events/'.arg(3).'/'.$object->Meet;
				 $rows[] = array('onmouseover'=>"dis_qt(".$i.",".js_null($object->SCORE2).",".js_null((($object->Course=='L')?0:1)).",".js_null($object->SlowCut).",".js_null($object->FastCut).",".js_null($object->Slow_L).",".js_null($object->Fast_L).",".$multi.")",'data' => array($object->Session,$object->MtEv.$object->MtEvX,$object->Sex,$object->Distance,Stroke($object->Stroke),Age($object->Lo_Hi),$object->Fee,$enter,array('data'=>$timebox.' <small>'.$object->Course.'</small>'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>",'class'=>(($object->qt%10==1)?'green':(($object->qt%10==2)?(($enforce==1)?'red':'yellow'):(($object->qt%10==3)?'red':''))).(($object->qt<10)?(($enforce==1)?' min_red':' min_yellow'):(($object->qt>30)?' red ':(($object->qt>20)?' min_red':'')))),$object->I_R,get_date($object->Start),$object->MName));
				 $i++;
			      }
			 }
		       if (!$rows)
			 $rows[] = array(array('data' => t('There are no events matching you criteria (Age,Sex)'), 'colspan' => 11));

		       $rows[] = array(array('data'=>'Total: ','colspan'=>'6','align'=>'right'),array('class'=>'total','data'=>'<div id=\'total\'>'.(($email==true)?$total:'').'</div>','colspan'=>'2'),array('colspan'=>'4'));

		       //if(arg(6)=='wesley')
			 {

			    $body = $output;
			    $table =  theme_table($headers, $rows,array('id'=>'total_C7_A6_Dtotal','onmouseout'=>'hide_dis();'));
			    $body.=$table;
			    $body.='<link rel="stylesheet" type="text/css" href="'.path().'/style.css">';
			    //$body.='<script type="text/javascript" defer="defer" src="'.path().'/js/athlete.js"></script>';

			    $ok=true;
			    if(arg(3)== 'mail' & $_POST["email"]==null)//entry page
			      {
				 $ok=false;
				 $ok = mimemail(null, $_POST['cemail'], $subject.' Entries',$body);
				 if($ok == true)
				   {
				      drupal_set_message('Entries email sent sucesfully!');
				      drupal_goto('athlete/'.arg(1).'/entries/'.arg(4));

				   }
				 else
				   {
				      drupal_set_message("Email failed to send to '".$_POST['cemail']."' , if this email address is correct click email");
				      drupal_goto('athlete/'.arg(1).'/entries/'.arg(4));

				   }

			      }

			    $output.="<form action='".url('athlete/').arg(1).'/entries/'.((arg(3)== 'events' || (arg(3)=='mail' & $_POST['email'] !=null)|| !$ok)?'confirm':'mail').'/'.arg(4).'/'.$meet."' method='post'><input type='hidden' name='meet' value='".$meet."'>";

			    $output.=$table."<br>Recipient Email Address &nbsp;&nbsp;<input type='text' name='email' value='' size='30'><input type='hidden' name='cemail' value='".$_POST['email']."'> &nbsp;<input type='submit' value='Email' name='submit'><br><br>I would advise you to send the email to your self first, the forward it on, so that you have proof of your entries";
			    $output.= "</form>";
			    $output.="</td></tr></table><br><br><br><br>";
			 }
		       //".((arg(3)== 'confirm')?'':$_POST['email'])."

		    }
		  else
		    {
		       $output.="<p aglin='center'>Sorry this meet Courses is not supoprted: ".$object->Course."</p>";
		    }

		  return $output;
	       }
	     else
	       {
		  $output.= athlete_heading($tm4db,$season,arg(3));
		  $output.="Please select a meet to see events list.<br>";
		  $output.="<br>";
		  $headers[] = array('data' => t('Meet'), 'width' => '300px','field' => 'm.MName');
		  $headers[] = array('data' => t('Type'), 'width' => '20px');
		  $headers[] = array('data' => t('Start date'), 'width' => '100px','sort' => 'desc','field' => 'm.Start');
		  $headers[] = array('data' => t('End date'), 'width' => '100px');
		  $headers[] = array('data' => t('Course'), 'width' => '40px');
		  $headers[] = array('data' => t('Location'));
		  // order by m.Start DESC
		  //
		  $result = db_query("select SQL_CACHE DISTINCT IF(e.Meet Is Null,1,0) as results, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location  from ".$tm4db.".meet_".$LSeason." m left join ".$tm4db.".mtevent_".$LSeason." e on (m.Meet=e.Meet) where m.Start >CURDATE()".tablesort_sql($headers));

		  while ($object = db_fetch_object($result))
		    {
		       $link = 'athlete/'.arg(1).'/entries/events/'.arg(3).'/'.$object->Meet;
		       $rows[] = array('data' => array(l(t($object->MName), $link),$object->Type,get_date($object->Start), get_date($object->End), $object->Course, $object->Location),'class'=>'onlythis');
		    }
		  $output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);

		  return $output;
	       }

	  }
	break;

      case 'standards':
	  {
	     switch(arg(3))
	       {/*
		case 'cheack age exist':
		    {
		       $output.= athlete_heading($tm4db,$season,arg(4));
		       $query = "Select SQL_CACHE *,extract(YEAR FROM from_days(datediff(CURDATE(), Birth))) as age from ".$tm4db.".athlete_".$season." where Athlete= %d";
		       $result= db_query($query,arg(4));
		       $object = db_fetch_object($result);
		       $age=$object->age-5;
		      
		       $output.='Please select an Age group from the sta';

		       $results = db_query("Select StdFile,Descript From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(5)));
		       if(db_num_rows($results)>0)
			 {
			    $object = db_fetch_object($results);
			    $headers[] = array('data' => t('Age Group'), 'width' => '120px');

			    $results = db_query("Select distinct ((Lo_Age*100)+Hi_Age) as Age From ".$tm4db.".".strtolower($object->StdFile)."_".$season." where Lo_Age <=".$age." ORDER by Lo_Age,Hi_Age");
			    if(db_num_rows($results)==1)
			      {
				 $object = db_fetch_object($results);
				 drupal_goto('athlete/'.arg(1).'/standards/age/'.arg(4).'/'.arg(5).'/'.$object->Age.'/L');
			      }
			    while($object = db_fetch_object($results))
			      $rows[] = array(l(Age($object->Age),'athlete/'.arg(1).'/standards/age/'.arg(4).'/'.arg(4).'/'.$object->Age.'/L'));
			 }
		       else
			 {
			    drupal_set_message('Sorry this standard seem to be missing');
			    drupal_goto('athlete/'.arg(1).'/standards/'.arg(4));
			 }
		       $output.=theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);

		       return $output;
		    }
		  break;*/
		  /*
		case 'perf':
		    {
			    $output.= athlete_heading($tm4db,$season,arg(4));
		       
			       $results = db_query("Select * From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(5)));
			     $object = db_fetch_array($results);
			     
			     drupal_set_title($object['StdFile'].(($object['Descript']==NULL)?'':' - '.$object['Descript'])." Standards &nbsp;&nbsp;");
			    $course = 0;
			    
			     $count=0;
			     $query='';
			     for($i=1;$i<13;$i++)
			       if($object['D'.$i]!=null & trim($object['D'.$i])!= '')
				 {
					 $level[$i] = $object['D'.$i];
					$query.= (", If(S".($i+$course)."is null,0,S".($i+$course).") As S".($i+$course));
				    $count++;
				 }else break;
			    

				 
			    
		       return $output.'Under Development';

		    }
		  break;*/

		case 'qt':
		    {
		       $output.= athlete_heading($tm4db,$season,arg(4));
		       
		         $results = db_query("Select SQL_CACHE * From ".$tm4db.".stdname_".$season." Where StdFile='%s'",strtolower(arg(5)));
			     $object = db_fetch_array($results);
			     drupal_set_title($object['StdFile'].(($object['Descript']==NULL)?'':' - '.$object['Descript'])." Standards &nbsp;&nbsp;");
			 //    setseasons_breadcrumb(array(l('Time Standards','standards/'.arg(1)),l('Age Groups','standards/'.arg(1).'/ages/'.arg(3))));
			   
			     $headers[] = array('data' => t('Q/Time'), 'width' => '100px');
			      $headers[] = array('data' => t('Description'), 'width' => '200px');
		
			     $count=0;
			     for($i=1;$i<13;$i++)
			       if($object['D'.$i]!=null & trim($object['D'.$i])!= '')
				 {
					 $link = 'athlete/'.arg(1).'/standards/events/'.arg(4).'/'.arg(5).'/'.arg(6).'/'.($i-1).'/'.$object['D'.$i]; 
				    $rows[] = array(l($object['D'.$i],$link),$object['D'.$i.'des']);
				    $count++;
				 }else break;
				 if($i==2)
				 {
					  drupal_goto($link);
				 }
		       
		      
		       $output.='<br/>Please select the standard time that you would like to apply.<br/><br/>';
		       $output.=theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
		       return $output;
		       

		    }
		  break;

		case 'type':
		    {
		       $output.= athlete_heading($tm4db,$season,arg(4));


					$query = "Select SQL_CACHE *,extract(YEAR FROM from_days(datediff(CURDATE(), Birth))) as age from ".$tm4db.".athlete_".$season." where Athlete= %d";
					$result= db_query($query,arg(4));
					$object = db_fetch_object($result);
					$c_age = $object->age;
					$birth = $object->Birth;
					$link = 'athlete/'.arg(1).'/standards/perf'.arg(4).'/'.$c_age;
					//$col[]=(l('Current Age '.$c_age,$link));
					$col[]='Current Age '.$c_age;
					for($i = ($c_age+1);$i<$c_age+5;$i++)
					{
						$link = 'athlete/'.arg(1).'/standards/perf/'.arg(4).'/'.arg(5).'/'.$i;
						$col[]='Age of '.$i;//(l('Age of '.$i,$link));
					}
					$output.=t('Current Under Development<br/>Please select your age to apply qualifying times at.<br> Note: use this to judge an athlete\'s performance and goal times.');
					$output.=theme_table(null,array($col),null,null);

					if($season == get_cur_seasons())
					{
					$headers[] = array('data' => t('Meet'), 'width' => '300px');
					$headers[] = array('data' => t('Type'), 'width' => '20px');
					$headers[] = array('data' => t('Start date'), 'width' => '100px');
					$headers[] = array('data' => t('End date'), 'width' => '100px');
					$headers[] = array('data' => t('Course'), 'width' => '40px');
					$headers[] = array('data' => t('Location'));
					// order by m.Start DESC

					$result = db_query("select SQL_CACHE extract(YEAR FROM from_days(datediff(IF(m.AgeUp is null,m.start,m.AgeUp), '".$birth."')))  as athlete_age,if(m.restrictbest=0,0,m.type) as best_time, m.Meet, m.MName, m.Start, m.End,m.Type, m.Course, m.Location,m.since,m.minage,m.restrictbest,m.enteratqtime from ".$tm4db.".meet_2007 m  where m.Start >CURDATE() order by athlete_age,m.course,m.minage,best_time,m.enteratqtime");
					$groupby = array('athlete_age'=>null,'Course'=>null,'minage'=>'','best_time'=>'','enteratqtime'=>'');
					while ($object = db_fetch_array($result))
					{
						foreach($groupby as $key =>$value)
						if($object[$key]!=$value)
						{//add group heading
							//set groupfields
							foreach($groupby as $key2=>$v)
							{$groupby[$key2]=$object[$key2];}
							$link = 'athlete/'.arg(1).'/standards/qt/'.arg(4).'/'.arg(5).'/'.$object['Meet'];
							$rows[] = array(array('data'=>'<b>'.l('Age '.$object['athlete_age'].' Meet Group',$link).'</b>','colspan'=>6,'class'=>'green'));
							break;
						}
						  $link = 'meets/'.arg(1).'/info/'.$object['Meet'];
						  $rows[] = array('data' => array(l(t($object['MName']), $link),$object['Type'],get_date($object['Start']), get_date($object['End']), $object['Course'], $object['Location']),'class'=>'onlythis');
					}
					$output.=t('<br/><br/>Please select a meet group <span style=\'background-color:#CCFF99\'>(Rows in Green)</span> for which a set of qualifying times will apply.<br/>Note: use this when considering qualifying times for specific meets as it take\'s into account your age and rules of the meet.');
					$output.= theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
					}
										     
			 return $output;
		    }
		  break;
		
		  case 'events':
		    {
			    	$LSeason = $season;
		       		  $result = db_query("select m.*,a.*, extract(YEAR FROM from_days(datediff(IF(m.AgeUp is null,m.Start,m.AgeUp), a.Birth))) as Age from ".$tm4db.".meet_".$season." as m, ".$tm4db.".athlete_".$LSeason." as a Where m.meet=%d and a.Athlete=%d",arg(6),arg(4));
		
				  $object = db_fetch_object($result);
				  if($object ==null)
				    {
				       drupal_set_message('meet not Found');
				       drupal_goto('athlete/'.arg(1).'/standards/type/'.arg(4).'/'.arg(5));
				    }
		
				  $enforce = $object->EnforceQualifying;
				  $enterqt = $object->EnterAtQTime;
				  $coursepref = substr($object->Course, 0, 1);
				  $multi = (($object->Course == 'L' || $object->Course == 'LO')?0:(($object->Course == 'S'||$object->Course == 'SO')?1:(3+(($coursepref=='L')?0:1))));
				  $meet = arg(6);
				  $std=strtolower(arg(5));
				  $std_qt=arg(7);
				  $std_qt_name=arg(8);
				  $age = $object->Age;
				  $since = $object->Since;
				  $since = ($since ==null || $since=='0000-00-00 00:00:00')?null:$since;
				  $restrictbest = $object->RestrictBest;
				  $restrictbest = ($restrictbest ==null || $restrictbest==0)?false:true;
				  $sex = $object->Sex;
				  $type = $obejct->Type;
				  $min_age = $object->MinAge;
				  $min_age = ($min_age==null)?0:$min_age;
				  $athlete = arg(4);
				  
				       $output.= athlete_heading($tm4db,$season,arg(4));
		
		
				       $output.="<table border='0' width='100%'><tr><td valign='top'>";
				      // .l('Meet Group','meets/'.$season.'/standard/meets/'.arg(4).'/'.arg(6))
				       $output.='<br>Meet Group: '.strtoupper($std).' - '.$std_qt_name.'<div id="noprint"><br><br>';
				       $output.="Age Update date: ".get_date((($ageUp !=null)?$ageUp:$object->Start))." (".$age."yrs)<br><br>";
				       $output.="Qualifying Times Enforced: ".yesno($object->EnforceQualifying);
				       $output.="<br><br>Min Open Age: ".hasvalue('',$min_age);
		
				       $output.="</div></td><td width='250px' valign='top'><div id='noprint'><br>".l("Course: ".$object->Course,'meets/'.$LSeason.'/info/'.arg(5))."<br><br>N.B Border Colors Apply to Slower than qt times.<br><br><br>Maxmium Entries: ".hasvalue('',$object->MaxIndEnt)."</td></div><td align='right'>";
		
				       $output.="<div id='noprint'><table class='entries' border='0' cellpadding='4px' width='359px'>";
		
				       $output.="<tr><td colspan='2'><b>Colors Key:</b></td></tr>";
				       $output.="<tr><td width='101' class='green'>Green</td><td><b>May enter with pleasure</b></td></tr>";
				       $output.="<tr><td width='101' class='yellow min_yellow'>Yellow/ Orange-border</td><td><b>Possible entry</b>, depends on  meet rules. haven't met qt times, but qt times aren't being enforced! </td></tr>";
				       $output.="<tr><td width='101' class='red min_red'>Red/ Brown-border</td><td><b>May not enter</b> as one does not meet pre-requisites for event.</td></tr>";
				       $output.="</table></div>";
		
				       $output.="</td></tr><tr><td colspan='3'>";
				  
		
				  $output.='';
							/*
							Pref is the used for order of selection, of which course comes first.
							qt if 1 means time qualifies for entry, if 2 then he does not qulify but it is depened on weather qt times are enforced.
							qt 3 means time does not qualify, because there are qt times avalible just not for that course.
							qt of less than 10 means he does not meet the slower than qt time, but these times are not enforced.
							qt larger than 20 means does no qualify.
							*/
				  if($object->Course=='LO' ||$object->Course=='LS' ||$object->Course=='SL' ||$object->Course=='SO' || $object->Course=='S' || $object->Course=='L')
				    {
					    
				       $query="";
				       $query.="SELECT SQL_CACHE f.*, min(f.qt) as qt, min(f.pref) as pref, min(f.conv) From ("; //select final information
				       $query.="SELECT h.* From (";// orders envents for preferance selection
		
				       $query.="SELECT f.*, min(f.SCORE) as SCORE2 From ("; //limits times to top time in each course
				       $query.="SELECT t.* From ("; //test all times
				        if($object->Course=='LO')
					 {
						 $qtset="  (e.F".($std_qt+12).">0) Or (e.S".($std_qt+12).">0) ";
					    //long course only query
					    $query.=" SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.S".($std_qt+12).">0),If(e.S".($std_qt+12).">=r.Score,11,12),11) + If((e.F".($std_qt+12).">0),If(e.F".($std_qt+12)."<=r.Score,0,-10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Hi_Age!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".$athlete;

					 }
		
				       if($object->Course=='LS') //Considers Muti course cut meets
					 {
						$qtset=" (e.F".$std_qt.">0) Or (e.F".($std_qt+12).">0) Or (e.S".($std_qt+12).">0) Or (e.S".$std_qt.">0) "; 
						 
					    //long course query
					    $query.=" SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.S".($std_qt+12).">0) Or (e.S".$std_qt.">0),If(e.S".($std_qt+12).">0,If(e.S".($std_qt+12).">=r.Score,11,12),13),11) + If((e.F".$std_qt.">0) Or (e.F".($std_qt+12).">0),If((e.F".($std_qt+12).">0),If(e.F".($std_qt+12)."<=r.Score,0,-10),10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".$athlete;
		
					    //Short course query
					    $query.=" union SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,2 as pref,If((e.S".($std_qt+12).">0) Or (e.S".$std_qt.">0),If(e.S".$std_qt.">0,If(e.S".$std_qt.">=r.Score,11,12),13),11) + If((e.F".$std_qt.">0) Or (e.F".($std_qt+12).">0),If((e.F".$std_qt.">0),If(e.F".$std_qt."<=r.Score,0,-10),10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='S'  and r.ATHLETE =".$athlete;
		
					 }
		
				       if($object->Course=='L') //Covert all times to long course then Consider them, note preferance (pref is equal here =1)
					 {
						 $qtset="  (e.F".($std_qt+12).">0) Or (e.S".($std_qt+12).">0) ";
					    //long course query
					    $query.=" SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE as SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.S".($std_qt+12).">0),If(e.S".($std_qt+12).">=r.Score,11,12),11) + If((e.F".($std_qt+12).">0),If(e.F".($std_qt+12)."<=r.Score,0,-10),0) as qt  ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='L'  and r.ATHLETE =".$athlete;
		
					    //Short course query
					    $query.=" union SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,".course_conversion($tm4db,$season)." as SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,1 as pref,If((e.S".($std_qt+12).">0),If(e.S".($std_qt+12).">=".course_conversion($tm4db,$season).",11,12),11) + If((e.F".($std_qt+12).">0),If(e.F".($std_qt+12)."<=".course_conversion($tm4db,$season).",0,-10),0) as qt  ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='S'  and r.ATHLETE =".$athlete;
		
					 }
		
				       if($object->Course=='SO')
					 {
						 $qtset=" (e.F".$std_qt.">0)  Or (e.S".$std_qt.">0) ";
					    //Short course only query
					    $query.=" SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE,r.Course,m.MName,m.Start,r.Score as conv,1 as pref,If((e.S".$std_qt.">0),If(e.S".$std_qt.">=r.Score,11,12),11) + If((e.F".$std_qt.">0),If(e.F".$std_qt."<=r.Score,0,-10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R!='L' and r.Course='S'  and r.ATHLETE =".$athlete;
					 }
		
				       if($object->Course=='SL')  //Considers Muti course cut meets
					 {	//Short course query
						 $qtset=" (e.F".$std_qt.">0) Or (e.F".($std_qt+12).">0) Or (e.S".($std_qt+12).">0) Or (e.S".$std_qt.">0) ";
						 
					    $query.=" SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE,r.Course,m.MName,m.Start,r.SCORE as conv,1 as pref,If((e.S".($std_qt+12).">0) Or (e.S".$std_qt.">0),If(e.S".$std_qt.">0,If(e.S".$std_qt.">=r.Score,11,12),13),11) + If((e.F".$std_qt.">0) Or (e.F".($std_qt+12).">0),If((e.F".$std_qt.">0),If(e.F".$std_qt."<=r.Score,0,-10),10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='S'  and r.ATHLETE =".$athlete;
		
					    //long course query
					    $query.=" union SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,2 as pref,If((e.S".($std_qt+12).">0) Or (e.S".$std_qt.">0),If(e.S".($std_qt+12).">0,If(e.S".($std_qt+12).">=r.Score,11,12),13),11) + If((e.F".$std_qt.">0) Or (e.F".($std_qt+12).">0),If((e.F".($std_qt+12).">0),If(e.F".($std_qt+12)."<=r.Score,0,-10),10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='L'  and r.ATHLETE =".$athlete;
		
					 }
		
				       if($object->Course=='S')  //Covert all times to shrt course then Consider them, note preferance (pref is equal here =1)
					 {
						 $qtset=" (e.F".$std_qt.">0)  Or (e.S".$std_qt.">0) ";
					    //Short course query
					    $query.=" SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,r.SCORE as SCORE,r.Course,m.MName,m.Start,r.SCORE as conv,1 as pref,If((e.S".$std_qt.">0),If(e.S".$std_qt.">=r.Score,11,12),11) + If((e.F".$std_qt.">0),If(e.F".$std_qt."<=r.Score,0,-10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R!='R' and r.Course='S'  and r.ATHLETE =".$athlete;
		
					    //long course query
					    $query.=" union SELECT r.I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance,".course_conversion($tm4db,$season)." as SCORE,r.Course,m.MName,m.Start,".course_conversion($tm4db,$season)." as conv,1 as pref,If((e.S".$std_qt.">0),If(e.S".$std_qt.">=".course_conversion($tm4db,$season).",11,12),11) + If((e.F".$std_qt.">0),If(e.F".$std_qt."<=".course_conversion($tm4db,$season).",0,-10),0) as qt ";
					    $query.=" From (".$tm4db.".result_".$season." as r inner JOIN ".$tm4db.".".$std."_".$LSeason." as e on (e.I_R='I'".(($age < $min_age)?'and e.Lo_Hi!=99':'')." and ((r.DISTANCE = e.DISTANCE and r.STROKE=e.STROKE)) and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age."))";
					    $query.=" inner join ".$tm4db.".meet_".$season." as m on (r.Meet = m.Meet ".(($since ==null)?'':"and m.Start >= '".$since."'").(($restrictbest==False)?'':" and m.Type='".$type."'").")";
					    $query.=" Where r.NT=0 and r.I_R='I' and r.Course='L'  and r.ATHLETE =".$athlete;
		
					 }
					 
				       $query.=" ) as t order by Lo_Hi,Stroke,Distance,pref,SCORE, Start desc";
		
				       $query.=") as f Group by Lo_Hi,Stroke,Distance,pref";
		
				       $query.=" union SELECT null as I_R,e.F".$std_qt.",e.S".$std_qt.",e.F".($std_qt+12).",e.S".($std_qt+12).",((e.Lo_Age*100)+e.Hi_Age) as Lo_Hi,e.Sex,e.Stroke,e.Distance, null as SCORE, null as Course, null as MName, '' as Start, null as conv,13 as pref,IF( ".$qtset." ,33,11) as qt, null as SCORE ";
				       $query.=" From (".$tm4db.".".$std."_".$LSeason." as e) Where (e.I_R='I'".(($age < $min_age)?'and e.Hi_Age!=99':'')."  and (e.Sex='".$sex."') and e.Lo_Age <= ".$age." AND e.Hi_Age >= ".$age.")";
		
				       $query.=" ) as h  order by Lo_Hi,Stroke,Distance,qt,pref,conv";
		
				       $query.=" ) as f Group by f.Lo_Hi,f.Stroke,f.Distance order by Stroke,Distance,Lo_Hi,qt,pref,conv, Start desc";
		
				       //$output.=$query;
				       $headers[] = array('data' => t('Dis'), 'width' => '40px');
				       $headers[] = array('data' => t('Stroke'), 'width' => '60px');
				       $headers[] = array('data' => t('Age'), 'width' => '80px');
				       $headers[] = array('data' => t('Time'), 'width' => '80px');
				       $headers[] = array('data' => t('I/L'), 'width' => '20px');
				       $headers[] = array('data' => t('Date'), 'width' => '80px');
				       $headers[] = array('data' => t('Meet'), 'width' => '320px');
				       // order by m.Start DESC
				      
				       $result = db_query($query);
				       $i=0;
				       $total = 0;
				       while ($object = db_fetch_array($result))
					 {
						 $timebox = get_time($object['conv']);
						 
						 //$link = 'athlete/entries/events/'.arg(3).'/'.$object->Meet;
						 $rows[] = array('onmouseover'=>"dis_qt(".$i.",".js_null($object['SCORE2']).",".js_null((($object['Course']=='L')?0:1)).",".js_null($object['S'.$std_qt]).",".js_null($object['F'.$std_qt]).",".js_null($object['S'.($std_qt+12)]).",".js_null($object['F'.($std_qt+12)]).",".$multi.")",'data' => array($object['Distance'],Stroke($object['Stroke']),Age($object['Lo_Hi']),array('data'=>$timebox.' <small>'.$object['Course'].'</small>'."<div class='cellrel'><div class='cellinfodis' id='s".$i."'></div></div>",'class'=>(($object['qt']%10==1)?'green':(($object['qt']%10==2)?(($enforce==1)?'red':'yellow'):(($object['qt']%10==3)?'red':''))).(($object['qt']<10)?(($enforce==1)?' min_red':' min_yellow'):(($object->qt>30)?' red ':(($object->qt>20)?' min_red':'')))),$object['I_R'],get_date($object['Start']),$object['MName']));
						 $i++;
					 }
					 
					
					 
				       if (!$rows)
					 $rows[] = array(array('data' => t('There are no events matching you criteria (Age,Sex)'), 'colspan' => 11));
		
		
		
					    
					    $table =  theme_table($headers, $rows,array('onmouseout'=>'hide_dis();'));
					    $output.=$table;
					    $output.="</td></tr></table><br><br><br><br>";
					     
					      }
					  else
					    {
					       $output.="<p aglin='center'>Sorry this meet Courses is not supoprted: ".$object->Course."</p>";
					    }
		       
		       return $output;

		    }
		  break;
		  
		  default:
		    {
		       $output.= athlete_heading($tm4db,$season,arg(3));
		       
		       
		       $headers[] = array('data' => t('Name'), 'width' => '100px');
		       $headers[] = array('data' => t('Description'), 'width' => '150px');
		       $headers[] = array('data' => t('Year'), 'width' => '40px');

		       $results = db_query("Select SQL_CACHE StdFile,Descript,Year From ".$tm4db.".stdname_".$season." Order BY Year desc,StdFile");

		       while($object = db_fetch_object($results))
			$rows[] = array(l($object->StdFile,'athlete/'.arg(1).'/standards/type/'.arg(3).'/'.$object->StdFile),$object->Descript,$object->Year);

		       $output.='<br/>Please select the standard times that you would like to apply.<br/><br/>';
		       $output.=theme_table($headers, $rows,array('id'=>'hyper','class'=>'hyper'),null);
		       return $output;
		       

		    }
		  break;

	       }
	  }
	break;

      case 'graphs':
	  {
	     $output.= athlete_heading($tm4db,$season,arg(3));

	     if(arg(4) ==null||arg(5) ==null)
	       {
		  $header[] = array('data' => t('Distance'), 'width' => '70px');
		  //$header[] = array('data' => t('Stroke'), 'width' => '80px');

		  $result = db_query("select r.DISTANCE, r.STROKE from ".$tm4db.".result_".$season." r where r.ATHLETE=%d and r.I_R <> 'R' and r.NT =0 group by r.STROKE, r.DISTANCE order by r.STROKE, r.DISTANCE",arg(3));
		  $output.='Please select an option.<br><br>';
		  $rows[] = array(l('ALL'.stroke($object->STROKE),'athlete/'.arg(1).'/graphs/'.arg(3).'/ALL/ALL'));
		  while ($object = db_fetch_object($result))
		    {
		       $rows[] = array(l($object->DISTANCE.' '.stroke($object->STROKE),'athlete/'.arg(1).'/graphs/'.arg(3).'/'.$object->DISTANCE.'/'.$object->STROKE));
		    }
		  $output.= theme_table(null, $rows,array('id'=>'hyper','class'=>'hyper'),null).'<br>';
	       }
	     else
	       {

		  $stroke = array(1 => "Freestyle", 2 => "Back", 3 => "Breast", 4 => "Butterfly", 5 => "Medley");

		  $header[] = array('data' => t('Time'), 'width' => '70px');
		  $header[] = array('data' => t('Distance'), 'width' => '70px');
		  $header[] = array('data' => t('Stroke'), 'width' => '80px');
		  $header[] = array('data' => t('Rounds'), 'width' => '50px');
		  $header[] = array('data' => t('Date'), 'width' => '90px');
		  $header[] = array('data' => t('Meet'), 'width' => '300px');

		  $key_lookup = array();
		  if(arg(4)=='ALL' & arg(5)=='ALL')
		    $result = db_query("select r.COURSE, r.SCORE, r.DISTANCE, r.STROKE, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet from ".$tm4db.".result_".$season." r, ".$tm4db.".meet_".$season." m where r.ATHLETE=%d and r.MEET=m.Meet and r.I_R <> 'R' and r.NT =0 and r.SCORE !=0 group by r.STROKE, r.DISTANCE order by r.STROKE, r.DISTANCE, r.SCORE",arg(3));
		  else
		    $result = db_query("select r.COURSE, r.SCORE, r.DISTANCE, r.STROKE, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet from ".$tm4db.".result_".$season." r, ".$tm4db.".meet_".$season." m where r.ATHLETE=%d and r.distance= %d and r.stroke=%d and r.MEET=m.Meet and r.I_R <> 'R' and r.NT =0 and r.SCORE !=0 group by r.STROKE, r.DISTANCE order by r.STROKE, r.DISTANCE, r.SCORE",arg(3),arg(4),arg(5));
		  while ($object = db_fetch_object($result))
		    {
		       $key_lookup[] = array($object->COURSE, $object->STROKE, $object->DISTANCE);
		    }

		  for ($i=0; $i<count($key_lookup); $i++)
		    {
		       $query = "select  r.COURSE, r.NT, r.SCORE, r.DISTANCE, r.STROKE,r.I_R, m.MName, m.Start, r.F_P, r.MtEvent, m.Meet from ".$tm4db.".result_".$season." as r left join ".$tm4db.".meet_".$season." as m on (r.MEET=m.Meet ) where r.SCORE !=0 AND r.NT=0 AND r.STROKE=".$key_lookup[$i][1]." and r.DISTANCE=".$key_lookup[$i][2]." and  r.ATHLETE=".arg(3)." order by r.STROKE,r.Distance, m.Start,r.COURSE,r.F_P desc,r.Score";

		       $result = db_query($query);
		       //			drupal_set_message($query);

		       $last_stroke = NULL;
		       $last_distance = NULL;
		       $rowsL = array();
		       $rowsS = array();
		       $graph_hdrs = array();
		       $graph_dataL = array();
		       $graph_dataS = array();

		       while ($object = db_fetch_object($result))
			 {
			    //				print_r($object);

			    $time = Score(0,$object->SCORE);
			    $f_p = (strtolower($object->F_P) == 'f') ? 'Final' : 'Prelim';

			    $start_date = explode("-", $object->Start);
			    $date = Date('d/m/Y', mktime(0, 0, 0, $start_date[1], $start_date[2], $start_date[0]));
			    $graph_hdrs[$date.$object->F_P] = $date.'|';
			    $link = 'meets/'.arg(1).'/event/results/'.$object->MtEvent;

			    if (strtolower($object->COURSE) == "l")
			      {
				 $rowsL[] = array($time, $object->DISTANCE.'m', $stroke[$object->STROKE], $f_p, $date, l(t($object->MName), $link));
				 $graph_dataL[$date.$object->F_P]=($object->SCORE).'|';

			      }
			    else
			      {
				 if($graph_hdrs[$date.$object->F_P] != null)
				   if($graph_dataS[$date.$object->F_P] != null)
				     $graph_dataL[$date.$object->F_P]='-|';
			      }

			    if (strtolower($object->COURSE) == "s")
			      {
				 $rowsS[] = array($time, $object->DISTANCE.'m', $stroke[$object->STROKE], $f_p, $date, l(t($object->MName), $link));
				 $graph_dataS[$date.$object->F_P]=($object->SCORE).'|';
			      }
			    else
			      {
				 if($graph_hdrs[$date.$object->F_P] != null)
				   if($graph_dataL[$date.$object->F_P] != null)
				     $graph_dataS[$date.$object->F_P]='-|';
			      }

			    if (strtolower($object->COURSE) == "s")
			      {
				 if($graph_hdrs[$date.$object->F_P] != null)
				   if($graph_dataS[$date.$object->F_P] != null)
				     $graph_dataL[$date.$object->F_P]='-|';
			      }

			    $last_stroke = $object->STROKE;
			    $last_distance = $object->DISTANCE;
			 }

		       $splitterL = array();
		       $splitterS = array();

		       $splitterL[] = array(array('data' => '<div style="font-weight: bold; color: blue;">Long Course</div>', 'colspan' => 6));
		       $splitterS[] = array(array('data' => '<div style="font-weight: bold; color: orange;">Short Course</div>', 'colspan' => 6));

		       $rows = array_merge($splitterL, $rowsL);
		       $rowsL = array_merge($rows, $splitterS);
		       $rows = array_merge($rowsL, $rowsS);

		       $graph_hdrs_data = NULL;
		       foreach($graph_hdrs as $key => $value)
			 {
			    $graph_hdrs_data.= $value;
			 }
		       $graph_dataL_data = NULL;
		       foreach($graph_dataL as $key => $value)
			 {
			    $graph_dataL_data.= $value;
			 }
		       $graph_dataS_data = NULL;
		       foreach($graph_dataS as $key => $value)
			 {
			    $graph_dataS_data.= $value;
			 }
	
		       $graph_data = '?headers='.$graph_hdrs_data;
		       $graph_data.= (($graph_dataL_data) ? '&data='.$graph_dataL_data : '');
		       $graph_data.= (($graph_dataS_data) ? '&data2='.$graph_dataS_data : '');

		       $gdataS[] = array('data' => "<table cellspacing='0' cellpadding='0'><tr><td style='padding:0px' width='700px'><div class='cellrel'><div class='graphsback'>".theme_image(path()."/images/swimming.jpg",null,null,array('width'=>'645px','height'=>'150px'),false)."</div>".theme_image(path()."/grapher.php".$graph_data,null,null,null,false)."</div></td></tr></table>", 'colspan' => 6,'align'=>'center');

		       $rows[] = $gdataS;

		       $output.= '<br><div style="font-weight: bold;">'.$last_distance.'m '.$stroke[$last_stroke].'</div><hr>';
		       $output.= theme('table', $header, $rows).'<br>';
		       $gdataS = NULL;
		       $rows   = NULL;
		       $rowsL  = NULL;
		       $rowsS  = NULL;
		    }
	       }

	     return $output;
	  }
	break;

      case 'list':
	  {
	     $header[] = array('data' => t('Surname'), 'width' => '120px');
	     $header[] = array('data' => t('Name'), 'width' => '120px');
	     $header[] = array('data' => t('Age'), 'width' => '30px');
	     $header[] = array('data' => t('Club'), 'width' => '40px');
	     if(arg(3)=='ath')
	       {
		  $name_filter = " a.Birth='".arg(4)."' and a.Sex='".arg(5)."' and a.Initial='".arg(6)."' and (LCASE(a.Last) like CONCAT('%','".strtolower(arg(7))."%') and LCASE(a.First) like CONCAT('%','".strtolower(arg(8))."%')) and";

	       }
	     else
	       {
		  switch(arg(4))
		    {
		     case 'an':
			 {
			    if (arg(5) !=null)
			      $name_filter = " LCASE(CONCAT(CONCAT(a.Last,a.First),a.Last)) like '".str_replace(" ", "%%",(' '.strtolower(arg(5)).' '))."'  and";
			    else
			      $name_filter = "";
			 }
		       break;

		     case 'ln':
			 {
			    $name_filter = " a.Last like CONCAT('%%','".strtolower(arg(5))."%%') and";
			 }
		       break;

		     case 'fn':
			 {
			    if (arg(5))
			      $name_filter = " a.First like CONCAT('%%','".strtolower(arg(5))."%%') and";
			    else
			      $name_filter = " a.Athlete=0 and";
			 }
		       break;

		     default:
			 {
			    if(arg(3)!=null)
			      $name_filter = " a.Last like '%%".arg(4)."%%' and";
			    else
			      $name_filter = " a.Athlete=0 and";
			 }
		       break;
		    }

		  switch(arg(3))
		    {
		     case 'ALL':
			 {
			    $clubs_filter = "";
			 }
		       break;

		     default:
			 {
			    if(arg(3)!=null)
			      $clubs_filter = " a.Team1=".arg(3)." and";
			    else
			      $clubs_filter = "";
			 }
		       break;
		    }
	       }
	     $result = db_query("select SQL_CACHE a.Athlete,a.Last,a.First,a.Sex,t.TCode,extract(YEAR FROM from_days(datediff(CURDATE(), a.Birth))) as Age  from ".$tm4db.".athlete_".$season." as a inner join ".$tm4db.".team_".$season." as t on (a.Team1=t.Team) where 1=1 and ".$name_filter." ".$clubs_filter."  a.Group='A' order by a.Last,a.first");
	     if(db_num_rows($result)==1)
	       {	$object = db_fetch_object($result);
		  drupal_goto("athlete/".arg(1)."/top_times/".$object->Athlete);
	       }
	     while ($object = db_fetch_object($result))
	       {
		  $link = "athlete/".arg(1)."/top_times/".$object->Athlete;

		  if (strtolower($object->Sex) == "m")
		    $rowsM[] = array(l(t(ucwords(strtolower($object->Last))), $link), ucwords(strtolower($object->First)), $object->Age,$object->TCode);
		  else
		    $rowsF[] = array(l(t(ucwords(strtolower($object->Last))), $link), ucwords(strtolower($object->First)),$object->Age,$object->TCode);
	       }

	     if (!$rowsM)
	       $rowsM[] = array(array('data' => t('No athletes available based the above criteria'), 'colspan' => 5));

	     if (!$rowsF)
	       $rowsF[] = array(array('data' => t('No athletes available based the above criteria'), 'colspan' => 5));

	     $output.= '<table width="100%">';
	     $output.= '<tr>';
	     $output.= '<td align="center" valign="top"><b>Male</b><br><br>'.theme_table($header, $rowsM,array('id'=>'hyper','class'=>'hyper'),null);
	     $output.= '</td>';
	     $output.= '<td align="center" valign="top"><b>Female</b><br><br>'.theme_table($header, $rowsF,array('id'=>'hyper','class'=>'hyper'),null);	;
	     $output.= '</td>';
	     $output.= '</tr>';
	     $output.= '</table>';

	     return $output;
	  }
	break;
      default:
	  {
	     drupal_set_title('Athlete Times');

	     $output.= drupal_get_form('perfanal_athlete_filter_form');
	     $output.="<a href='".url("athlete/").get_cur_seasons()."/list/ALL/an'></a>";
	     return $output;

	  }
	break;
     }
}
/*
function perfanal_top_pages() {
	$sql = "SELECT COUNT(path) AS hits, substring(CONCAT(path,'/'),1,locate('/',CONCAT(path,'/'))-1) AS main,concat(substring(CONCAT(path,'/'),1,locate('/',CONCAT(path,'/'),(locate('/',path)+1))-1),substring(path,13,locate('/',path,14)-13))  as path2, title, AVG(timer) AS average_time, SUM(timer) AS total_time  FROM {accesslog} as r where instr(url,'perfanal') >0 GROUP BY main, path2 WITH ROLLUP";


  $header = array(
    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),
    array('data' => t('Page'), 'field' => 'path'),
    array('data' => t('Average page generation time'), 'field' => 'average_time'),
    array('data' => t('Total page generation time'), 'field' => 'total_time')
  );

  $result = db_query($sql);

  while ($page = db_fetch_object($result)) {
    $rows[] = array($page->hits, _statistics_format_item('', $page->path2), t('%time ms', array('%time' => round($page->average_time))), format_interval(round($page->total_time / 1000)));
  }

  drupal_set_title(t('Top pages in the past %interval', array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200)))));
  $output = theme('table', $header, $rows);
  return $output;
}*/
/*
function perfanal_install()
{
	db_query("CREATE TABLE {perfanal_subsites} (site tinyint(3) NOT NULL auto_increment,  lsc char(3) NOT NULL default '',  url text NOT NULL,  enabled tinyint(3) default '0',PRIMARY KEY  (site)) ENGINE=InnoDB DEFAULT DEFAULT CHARSET=ascii;");
}*/

?>
